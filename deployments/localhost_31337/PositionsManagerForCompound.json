{"metadata":"{\"compiler\":{\"version\":\"0.8.7\"},\"sources\":{\"contracts/compound/PositionsManagerForCompound.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.7;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./libraries/CompoundMath.sol\\\";\\nimport \\\"./libraries/DoubleLinkedList.sol\\\";\\nimport \\\"./libraries/ErrorsForCompound.sol\\\";\\nimport {ICErc20, IComptroller, ICompoundOracle} from \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IMarketsManagerForCompound.sol\\\";\\n\\n/**\\n *  @title MorphoPositionsManagerForComp?\\n *  @dev Smart contract interacting with Comp to enable P2P supply/borrow positions that can fallback on Comp's pool using cToken tokens.\\n */\\ncontract PositionsManagerForCompound is ReentrancyGuard {\\n    using DoubleLinkedList for DoubleLinkedList.List;\\n    using CompoundMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    /* Structs */\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In p2pUnit, a unit that grows in value, to keep track of the interests/debt increase when users are in p2p.\\n        uint256 onPool; // In cToken.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In p2pUnit.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when users are in Comp. Multiply by current borrowIndex to get the underlying amount.\\n    }\\n\\n    // Struct to avoid stack too deep error\\n    struct BalanceStateVars {\\n        uint256 debtValue; // The total debt value (in USD).\\n        uint256 maxDebtValue; // The maximum debt value available thanks to the collateral (in USD).\\n        uint256 redeemedValue; // The redeemed value if any (in USD).\\n        uint256 collateralValue; // The collateral value (in USD).\\n        uint256 debtToAdd; // The debt to add at the current iteration.\\n        uint256 collateralToAdd; // The collateral to add at the current iteration.\\n        address cTokenEntered; // The cToken token entered by the user.\\n        uint256 p2pExchangeRate; // The p2pUnit exchange rate of the `cErc20Entered`.\\n        uint256 underlyingPrice; // The price of the underlying linked to the `cErc20Entered`.\\n    }\\n\\n    // Struct to avoid stack too deep error\\n    struct LiquidateVars {\\n        uint256 borrowBalance; // Total borrow balance of the user in underlying for a given asset.\\n        uint256 amountToSeize; // The amount of collateral underlying the liquidator can seize.\\n        uint256 priceBorrowedMantissa; // The price of the asset borrowed (in USD).\\n        uint256 priceCollateralMantissa; // The price of the collateral asset (in USD).\\n        uint256 collateralOnPoolInUnderlying; // The amount of underlying the liquidatee has on Comp.\\n    }\\n\\n    /* Storage */\\n\\n    uint16 public NMAX = 20;\\n    uint8 public constant CTOKEN_DECIMALS = 8;\\n    mapping(address => DoubleLinkedList.List) internal suppliersInP2P; // Suppliers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal suppliersOnPool; // Suppliers on Comp.\\n    mapping(address => DoubleLinkedList.List) internal borrowersInP2P; // Borrowers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal borrowersOnPool; // Borrowers on Comp.\\n    mapping(address => mapping(address => SupplyBalance)) public supplyBalanceInOf; // For a given market, the supply balance of user.\\n    mapping(address => mapping(address => BorrowBalance)) public borrowBalanceInOf; // For a given market, the borrow balance of user.\\n    mapping(address => mapping(address => bool)) public accountMembership; // Whether the account is in the market or not.\\n    mapping(address => address[]) public enteredMarkets; // Markets entered by a user.\\n    mapping(address => uint256) public threshold; // Thresholds below the ones suppliers and borrowers cannot enter markets.\\n\\n    IComptroller public comptroller;\\n    IMarketsManagerForCompound public marketsManagerForCompound;\\n\\n    /* Events */\\n\\n    /** @dev Emitted when a supply happens.\\n     *  @param _account The address of the supplier.\\n     *  @param _cTokenAddress The address of the market where assets are supplied into.\\n     *  @param _amount The amount of assets.\\n     */\\n    event Supplied(address indexed _account, address indexed _cTokenAddress, uint256 _amount);\\n\\n    /** @dev Emitted when a withdraw happens.\\n     *  @param _account The address of the withdrawer.\\n     *  @param _cTokenAddress The address of the market from where assets are withdrawn.\\n     *  @param _amount The amount of assets.\\n     */\\n    event Withdrawn(address indexed _account, address indexed _cTokenAddress, uint256 _amount);\\n\\n    /** @dev Emitted when a borrow happens.\\n     *  @param _account The address of the borrower.\\n     *  @param _cTokenAddress The address of the market where assets are borrowed.\\n     *  @param _amount The amount of assets.\\n     */\\n    event Borrowed(address indexed _account, address indexed _cTokenAddress, uint256 _amount);\\n\\n    /** @dev Emitted when a repay happens.\\n     *  @param _account The address of the repayer.\\n     *  @param _cTokenAddress The address of the market where assets are repaid.\\n     *  @param _amount The amount of assets.\\n     */\\n    event Repaid(address indexed _account, address indexed _cTokenAddress, uint256 _amount);\\n\\n    /** @dev Emitted when a liquidation happens.\\n     *  @param _liquidator The address of the liquidator.\\n     *  @param _liquidatee The address of the liquidatee.\\n     *  @param _amountRepaid The amount of borrowed asset repaid.\\n     *  @param _cTokenBorrowedAddress The address of the borrowed asset.\\n     *  @param _amountSeized The amount of collateral asset seized.\\n     *  @param _cTokenCollateralAddress The address of the collateral asset seized.\\n     */\\n    event Liquidated(\\n        address indexed _liquidator,\\n        address indexed _liquidatee,\\n        uint256 _amountRepaid,\\n        address _cTokenBorrowedAddress,\\n        uint256 _amountSeized,\\n        address _cTokenCollateralAddress\\n    );\\n\\n    /** @dev Emitted when the position of a supplier is updated.\\n     *  @param _account The address of the supplier.\\n     *  @param _cTokenAddress The address of the market.\\n     *  @param _amountAddedOnPool The amount of underlying asset added on pool.\\n     *  @param _amountAddedInP2P The amount of underlying asset added in P2P.\\n     *  @param _amountRemovedFromPool The amount of underlying asset removed from the pool.\\n     *  @param _amountRemovedFromP2P The amount of underlying asset remove from P2P.\\n     *  @param _p2pExchangeRate The P2P exchange rate at the moment.\\n     *  @param _cTokenExchangeRate The cToken exchange rate at the moment.\\n     */\\n    event SupplierPositionUpdated(\\n        address indexed _account,\\n        address indexed _cTokenAddress,\\n        uint256 _amountAddedOnPool,\\n        uint256 _amountAddedInP2P,\\n        uint256 _amountRemovedFromPool,\\n        uint256 _amountRemovedFromP2P,\\n        uint256 _p2pExchangeRate,\\n        uint256 _cTokenExchangeRate\\n    );\\n\\n    /** @dev Emitted when the position of a borrower is updated.\\n     *  @param _account The address of the borrower.\\n     *  @param _cTokenAddress The address of the market.\\n     *  @param _amountAddedOnPool The amount of underlying asset added on pool.\\n     *  @param _amountAddedInP2P The amount of underlying asset added in P2P.\\n     *  @param _amountRemovedFromPool The amount of underlying asset removed from the pool.\\n     *  @param _amountRemovedFromP2P The amount of underlying asset remove from P2P.\\n     *  @param _p2pExchangeRate The P2P exchange rate at the moment.\\n     *  @param _borrowIndex The borrow index at the moment.\\n     */\\n    event BorrowerPositionUpdated(\\n        address indexed _account,\\n        address indexed _cTokenAddress,\\n        uint256 _amountAddedOnPool,\\n        uint256 _amountAddedInP2P,\\n        uint256 _amountRemovedFromPool,\\n        uint256 _amountRemovedFromP2P,\\n        uint256 _p2pExchangeRate,\\n        uint256 _borrowIndex\\n    );\\n\\n    /* Modifiers */\\n\\n    /** @dev Prevents a user to access a market not created yet.\\n     *  @param _cTokenAddress The address of the market.\\n     */\\n    modifier isMarketCreated(address _cTokenAddress) {\\n        require(marketsManagerForCompound.isCreated(_cTokenAddress), Errors.PM_MARKET_NOT_CREATED);\\n        _;\\n    }\\n\\n    /** @dev Prevents a user to supply or borrow less than threshold.\\n     *  @param _cTokenAddress The address of the market.\\n     *  @param _amount The amount in ERC20 tokens.\\n     */\\n    modifier isAboveThreshold(address _cTokenAddress, uint256 _amount) {\\n        require(_amount >= threshold[_cTokenAddress], Errors.PM_AMOUNT_NOT_ABOVE_THRESHOLD);\\n        _;\\n    }\\n\\n    /** @dev Prevents a user to call function only allowed for the markets manager.\\n     */\\n    modifier onlyMarketsManager() {\\n        require(msg.sender == address(marketsManagerForCompound), Errors.PM_ONLY_MARKETS_MANAGER);\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    /** @dev Constructs the PositionsManagerForCompound contract.\\n     *  @param _compoundMarketsManager The address of the markets manager.\\n     *  @param _proxyComptrollerAddress The address of the proxy comptroller.\\n     */\\n    constructor(address _compoundMarketsManager, address _proxyComptrollerAddress) {\\n        marketsManagerForCompound = IMarketsManagerForCompound(_compoundMarketsManager);\\n        comptroller = IComptroller(_proxyComptrollerAddress);\\n    }\\n\\n    /* External */\\n\\n    /** @dev Creates Comp's markets.\\n     *  @param _cTokenAddress The address of the market the user wants to supply.\\n     *  @return The results of entered.\\n     */\\n    function createMarket(address _cTokenAddress)\\n        external\\n        onlyMarketsManager\\n        returns (uint256[] memory)\\n    {\\n        address[] memory marketToEnter = new address[](1);\\n        marketToEnter[0] = _cTokenAddress;\\n        return comptroller.enterMarkets(marketToEnter);\\n    }\\n\\n    /** @dev Sets the maximum number of users in tree.\\n     *  @param _newMaxNumber The maximum number of users to have in the tree.\\n     */\\n    function setMaxNumberOfUsersInTree(uint16 _newMaxNumber) external onlyMarketsManager {\\n        NMAX = _newMaxNumber;\\n    }\\n\\n    /** @dev Sets the threshold of a market.\\n     *  @param _cTokenAddress The address of the market to set the threshold.\\n     *  @param _newThreshold The new threshold.\\n     */\\n    function setThreshold(address _cTokenAddress, uint256 _newThreshold)\\n        external\\n        onlyMarketsManager\\n    {\\n        threshold[_cTokenAddress] = _newThreshold;\\n    }\\n\\n    /** @dev Supplies ERC20 tokens in a specific market.\\n     *  @param _cTokenAddress The address of the market the user wants to supply.\\n     *  @param _amount The amount to supply in ERC20 tokens.\\n     */\\n    function supply(address _cTokenAddress, uint256 _amount)\\n        external\\n        nonReentrant\\n        isMarketCreated(_cTokenAddress)\\n        isAboveThreshold(_cTokenAddress, _amount)\\n    {\\n        console.log(\\\"supplier\\\", msg.sender);\\n        console.log(\\\"_amount\\\", _amount);\\n        console.log(\\\"_cTokenAddress\\\", _cTokenAddress);\\n        _handleMembership(_cTokenAddress, msg.sender);\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        IERC20 underlyingToken = IERC20(cToken.underlying());\\n        underlyingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Supplied(msg.sender, _cTokenAddress, _amount);\\n        uint256 cTokenExchangeRate = cToken.exchangeRateCurrent();\\n        /* DEFAULT CASE: There aren't any borrowers waiting on Comp, Morpho supplies all the tokens to Comp */\\n        uint256 remainingToSupplyToPool = _amount;\\n\\n        /* If some borrowers are waiting on Comp, Morpho matches the supplier in P2P with them as much as possible */\\n        if (borrowersOnPool[_cTokenAddress].getHead() != address(0)) {\\n            console.log(\\\"borrowerrs on pool?\\\");\\n            uint256 p2pExchangeRate = marketsManagerForCompound.updateP2pUnitExchangeRate(\\n                _cTokenAddress\\n            );\\n            remainingToSupplyToPool = _matchBorrowers(_cTokenAddress, _amount); // In underlying\\n            uint256 matched = _amount - remainingToSupplyToPool;\\n\\n            if (matched > 0) {\\n                supplyBalanceInOf[_cTokenAddress][msg.sender].inP2P += matched.div(p2pExchangeRate); // In p2pUnit\\n                emit SupplierPositionUpdated(\\n                    msg.sender,\\n                    _cTokenAddress,\\n                    0,\\n                    matched,\\n                    0,\\n                    0,\\n                    p2pExchangeRate,\\n                    0\\n                );\\n                _updateSupplierList(_cTokenAddress, msg.sender);\\n            }\\n        }\\n\\n        /* If there aren't enough borrowers waiting on Comp to match all the tokens supplied, the rest is supplied to Comp */\\n        if (remainingToSupplyToPool > 0) {\\n            console.log(\\\"remainingToSupplyToPool?\\\");\\n            if (_isAboveCompoundThreshold(_cTokenAddress, remainingToSupplyToPool)) {\\n                supplyBalanceInOf[_cTokenAddress][msg.sender].onPool += remainingToSupplyToPool.div(\\n                    cTokenExchangeRate\\n                ); // In cToken\\n                _supplyERC20ToPool(_cTokenAddress, remainingToSupplyToPool); // Revert on error\\n                emit SupplierPositionUpdated(\\n                    msg.sender,\\n                    _cTokenAddress,\\n                    remainingToSupplyToPool,\\n                    0,\\n                    0,\\n                    0,\\n                    0,\\n                    cTokenExchangeRate\\n                );\\n                _updateSupplierList(_cTokenAddress, msg.sender);\\n            }\\n        }\\n    }\\n\\n    /** @dev Borrows ERC20 tokens.\\n     *  @param _cTokenAddress The address of the markets the user wants to enter.\\n     *  @param _amount The amount to borrow in ERC20 tokens.\\n     */\\n    function borrow(address _cTokenAddress, uint256 _amount)\\n        external\\n        nonReentrant\\n        isMarketCreated(_cTokenAddress)\\n        isAboveThreshold(_cTokenAddress, _amount)\\n    {\\n        _handleMembership(_cTokenAddress, msg.sender);\\n        _checkAccountLiquidity(msg.sender, _cTokenAddress, 0, _amount);\\n        emit Borrowed(msg.sender, _cTokenAddress, _amount);\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        IERC20 underlyingToken = IERC20(cToken.underlying());\\n        /* DEFAULT CASE: There aren't any borrowers waiting on Comp, Morpho borrows all the tokens from Comp */\\n        uint256 remainingToBorrowOnPool = _amount;\\n\\n        /* If some suppliers are waiting on Comp, Morpho matches the borrower in P2P with them as much as possible */\\n        if (suppliersOnPool[_cTokenAddress].getHead() != address(0)) {\\n            uint256 p2pExchangeRate = marketsManagerForCompound.p2pUnitExchangeRate(_cTokenAddress);\\n            remainingToBorrowOnPool = _matchSuppliers(_cTokenAddress, _amount); // In underlying\\n            uint256 matched = _amount - remainingToBorrowOnPool;\\n            if (matched > 0) {\\n                borrowBalanceInOf[_cTokenAddress][msg.sender].inP2P += matched.div(p2pExchangeRate); // In p2pUnit\\n                emit BorrowerPositionUpdated(\\n                    msg.sender,\\n                    _cTokenAddress,\\n                    0,\\n                    matched,\\n                    0,\\n                    0,\\n                    p2pExchangeRate,\\n                    0\\n                );\\n                _updateBorrowerList(_cTokenAddress, msg.sender);\\n            }\\n        }\\n\\n        /* If there aren't enough suppliers waiting on Comp to match all the tokens borrowed, the rest is borrowed from Comp */\\n        if (remainingToBorrowOnPool > 0) {\\n            require(cToken.borrow(remainingToBorrowOnPool) == 0, Errors.PM_BORROW_ON_COMP_FAIL);\\n            uint256 borrowIndex = cToken.borrowIndex();\\n            borrowBalanceInOf[_cTokenAddress][msg.sender].onPool += remainingToBorrowOnPool.div(\\n                borrowIndex\\n            ); // In cdUnit\\n            emit BorrowerPositionUpdated(\\n                msg.sender,\\n                _cTokenAddress,\\n                remainingToBorrowOnPool,\\n                0,\\n                0,\\n                0,\\n                borrowIndex,\\n                0\\n            );\\n            _updateBorrowerList(_cTokenAddress, msg.sender);\\n        }\\n\\n        underlyingToken.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /** @dev Withdraws ERC20 tokens from supply.\\n     *  @param _cTokenAddress The address of the market the user wants to interact with.\\n     *  @param _amount The amount in tokens to withdraw from supply.\\n     */\\n    function withdraw(address _cTokenAddress, uint256 _amount) external nonReentrant {\\n        _withdraw(_cTokenAddress, _amount, msg.sender, msg.sender);\\n    }\\n\\n    /** @dev Repays debt of the user.\\n     *  @dev `msg.sender` must have approved Morpho's contract to spend the underlying `_amount`.\\n     *  @param _cTokenAddress The address of the market the user wants to interact with.\\n     *  @param _amount The amount in ERC20 tokens to repay.\\n     */\\n    function repay(address _cTokenAddress, uint256 _amount) external nonReentrant {\\n        _repay(_cTokenAddress, msg.sender, _amount);\\n    }\\n\\n    /** @dev Allows someone to liquidate a position.\\n     *  @param _cTokenBorrowedAddress The address of the debt token the liquidator wants to repay.\\n     *  @param _cTokenCollateralAddress The address of the collateral the liquidator wants to seize.\\n     *  @param _borrower The address of the borrower to liquidate.\\n     *  @param _amount The amount to repay in ERC20 tokens.\\n     */\\n    function liquidate(\\n        address _cTokenBorrowedAddress,\\n        address _cTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        require(_amount > 0, Errors.PM_AMOUNT_IS_0);\\n        (uint256 debtValue, uint256 maxDebtValue, ) = _getUserHypotheticalBalanceStates(\\n            _borrower,\\n            address(0),\\n            0,\\n            0\\n        );\\n        require(debtValue > maxDebtValue, Errors.PM_DEBT_VALUE_NOT_ABOVE_MAX);\\n        LiquidateVars memory vars;\\n        vars.borrowBalance =\\n            borrowBalanceInOf[_cTokenBorrowedAddress][_borrower].onPool.mul(\\n                ICErc20(_cTokenBorrowedAddress).borrowIndex()\\n            ) +\\n            borrowBalanceInOf[_cTokenBorrowedAddress][_borrower].inP2P.mul(\\n                marketsManagerForCompound.p2pUnitExchangeRate(_cTokenBorrowedAddress)\\n            );\\n        require(\\n            _amount <= vars.borrowBalance.mul(comptroller.closeFactorMantissa()),\\n            Errors.PM_AMOUNT_ABOVE_ALLOWED_TO_REPAY\\n        );\\n\\n        _repay(_cTokenBorrowedAddress, _borrower, _amount);\\n\\n        // Calculate the amount of token to seize from collateral\\n        ICompoundOracle compoundOracle = ICompoundOracle(comptroller.oracle());\\n        vars.priceCollateralMantissa = compoundOracle.getUnderlyingPrice(_cTokenCollateralAddress);\\n        vars.priceBorrowedMantissa = compoundOracle.getUnderlyingPrice(_cTokenBorrowedAddress);\\n        require(\\n            vars.priceCollateralMantissa != 0 && vars.priceBorrowedMantissa != 0,\\n            Errors.PM_TO_SEIZE_ABOVE_COLLATERAL\\n        );\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        ICErc20 cTokenCollateralToken = ICErc20(_cTokenCollateralAddress);\\n\\n        vars.amountToSeize = _amount\\n            .mul(vars.priceBorrowedMantissa)\\n            .mul(comptroller.liquidationIncentiveMantissa())\\n            .div(vars.priceCollateralMantissa);\\n\\n        vars.collateralOnPoolInUnderlying = supplyBalanceInOf[_cTokenCollateralAddress][_borrower]\\n            .onPool\\n            .mul(cTokenCollateralToken.exchangeRateStored());\\n        uint256 totalCollateral = vars.collateralOnPoolInUnderlying +\\n            supplyBalanceInOf[_cTokenCollateralAddress][_borrower].inP2P.mul(\\n                marketsManagerForCompound.updateP2pUnitExchangeRate(_cTokenCollateralAddress)\\n            );\\n\\n        require(vars.amountToSeize <= totalCollateral, Errors.PM_TO_SEIZE_ABOVE_COLLATERAL);\\n        emit Liquidated(\\n            msg.sender,\\n            _borrower,\\n            _amount,\\n            _cTokenBorrowedAddress,\\n            vars.amountToSeize,\\n            _cTokenCollateralAddress\\n        );\\n        _withdraw(_cTokenCollateralAddress, vars.amountToSeize, _borrower, msg.sender);\\n    }\\n\\n    /* Internal */\\n\\n    /** @dev Withdraws ERC20 tokens from supply.\\n     *  @param _cTokenAddress The address of the market the user wants to interact with.\\n     *  @param _amount The amount in tokens to withdraw from supply.\\n     *  @param _holder the user to whom Morpho will withdraw the supply.\\n     *  @param _receiver The address of the user that will receive the tokens.\\n     */\\n    function _withdraw(\\n        address _cTokenAddress,\\n        uint256 _amount,\\n        address _holder,\\n        address _receiver\\n    ) internal isMarketCreated(_cTokenAddress) {\\n        require(_amount > 0, Errors.PM_AMOUNT_IS_0);\\n        _checkAccountLiquidity(_holder, _cTokenAddress, _amount, 0);\\n        emit Withdrawn(_holder, _cTokenAddress, _amount);\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        IERC20 underlyingToken = IERC20(cToken.underlying());\\n        uint256 cTokenExchangeRate = cToken.exchangeRateCurrent();\\n        uint256 remainingToWithdraw = _amount;\\n\\n        /* If user has some tokens waiting on Comp */\\n        if (supplyBalanceInOf[_cTokenAddress][_holder].onPool > 0) {\\n            uint256 amountOnPoolInUnderlying = supplyBalanceInOf[_cTokenAddress][_holder]\\n                .onPool\\n                .mul(cTokenExchangeRate);\\n            /* CASE 1: User withdraws less than his Comp supply balance */\\n            if (_amount <= amountOnPoolInUnderlying) {\\n                if (_isAboveCompoundThreshold(_cTokenAddress, _amount)) {\\n                    supplyBalanceInOf[_cTokenAddress][_holder].onPool -= _amount.div(\\n                        cTokenExchangeRate\\n                    ); // In cToken\\n                    _withdrawERC20FromComp(_cTokenAddress, _amount); // Revert on error\\n                    emit SupplierPositionUpdated(\\n                        _holder,\\n                        _cTokenAddress,\\n                        0,\\n                        0,\\n                        _amount,\\n                        0,\\n                        0,\\n                        cTokenExchangeRate\\n                    );\\n                }\\n                remainingToWithdraw = 0; // In underlying\\n            }\\n            /* CASE 2: User withdraws more than his Comp supply balance */\\n            else {\\n                require(\\n                    cToken.redeem(supplyBalanceInOf[_cTokenAddress][_holder].onPool) == 0,\\n                    Errors.PM_REDEEM_ON_COMP_FAIL\\n                );\\n                supplyBalanceInOf[_cTokenAddress][_holder].onPool = 0;\\n                emit SupplierPositionUpdated(\\n                    _holder,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    amountOnPoolInUnderlying,\\n                    0,\\n                    0,\\n                    cTokenExchangeRate\\n                );\\n                remainingToWithdraw = _amount - amountOnPoolInUnderlying; // In underlying\\n            }\\n            _updateSupplierList(_cTokenAddress, _holder);\\n        }\\n\\n        /* If there remains some tokens to withdraw (CASE 2), Morpho breaks credit lines and repair them either with other users or with Comp itself */\\n        if (remainingToWithdraw > 0) {\\n            uint256 p2pExchangeRate = marketsManagerForCompound.p2pUnitExchangeRate(_cTokenAddress);\\n            uint256 cTokenContractBalanceInUnderlying = cToken.balanceOf(address(this)).mul(\\n                cTokenExchangeRate\\n            );\\n            /* CASE 1: Other suppliers have enough tokens on Comp to compensate user's position*/\\n            if (remainingToWithdraw <= cTokenContractBalanceInUnderlying) {\\n                console.log(\\\"_cTokenAddress\\\", _cTokenAddress);\\n                console.log(\\\"remainingToWithdraw\\\", remainingToWithdraw);\\n                console.log(\\\"cTokenContractBalanceInUnderlying\\\", cTokenContractBalanceInUnderlying);\\n                supplyBalanceInOf[_cTokenAddress][_holder].inP2P -= remainingToWithdraw.div(\\n                    p2pExchangeRate\\n                ); // In p2pUnit\\n                _updateSupplierList(_cTokenAddress, _holder);\\n                require(\\n                    _matchSuppliers(_cTokenAddress, remainingToWithdraw) == 0,\\n                    Errors.PM_REMAINING_TO_MATCH_IS_NOT_0\\n                );\\n                emit SupplierPositionUpdated(\\n                    _holder,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    0,\\n                    remainingToWithdraw,\\n                    p2pExchangeRate,\\n                    0\\n                );\\n            }\\n            /* CASE 2: Other suppliers don't have enough tokens on Comp. Such scenario is called the Hard-Withdraw */\\n            else {\\n                supplyBalanceInOf[_cTokenAddress][_holder].inP2P -= remainingToWithdraw.div(\\n                    p2pExchangeRate\\n                ); // In p2pUnit\\n                _updateSupplierList(_cTokenAddress, _holder);\\n                uint256 remaining = _matchSuppliers(\\n                    _cTokenAddress,\\n                    cTokenContractBalanceInUnderlying\\n                );\\n                emit SupplierPositionUpdated(\\n                    _holder,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    0,\\n                    remainingToWithdraw,\\n                    p2pExchangeRate,\\n                    0\\n                );\\n                remainingToWithdraw -= remaining;\\n                require(\\n                    _unmatchBorrowers(_cTokenAddress, remainingToWithdraw) == 0, // We break some P2P credit lines the user had with borrowers and fallback on Comp.\\n                    Errors.PM_REMAINING_TO_UNMATCH_IS_NOT_0\\n                );\\n            }\\n        }\\n\\n        underlyingToken.safeTransfer(_receiver, _amount);\\n    }\\n\\n    /** @dev Implements repay logic.\\n     *  @dev `msg.sender` must have approved this contract to spend the underlying `_amount`.\\n     *  @param _cTokenAddress The address of the market the user wants to interact with.\\n     *  @param _borrower The address of the `_borrower` to repay the borrow.\\n     *  @param _amount The amount of ERC20 tokens to repay.\\n     */\\n    function _repay(\\n        address _cTokenAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) internal isMarketCreated(_cTokenAddress) {\\n        require(_amount > 0, Errors.PM_AMOUNT_IS_0);\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        IERC20 underlyingToken = IERC20(cToken.underlying());\\n        underlyingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 remainingToRepay = _amount;\\n\\n        /* If user is borrowing tokens on Comp */\\n        if (borrowBalanceInOf[_cTokenAddress][_borrower].onPool > 0) {\\n            uint256 borrowIndex = cToken.borrowIndex();\\n            uint256 onPoolInUnderlying = borrowBalanceInOf[_cTokenAddress][_borrower].onPool.mul(\\n                borrowIndex\\n            );\\n            /* CASE 1: User repays less than his Comp borrow balance */\\n            if (_amount <= onPoolInUnderlying) {\\n                underlyingToken.safeApprove(_cTokenAddress, _amount);\\n                cToken.repayBorrow(_amount);\\n                borrowBalanceInOf[_cTokenAddress][_borrower].onPool -= _amount.div(borrowIndex); // In cdUnit\\n                remainingToRepay = 0;\\n                emit BorrowerPositionUpdated(\\n                    _borrower,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    _amount,\\n                    0,\\n                    0,\\n                    borrowIndex\\n                );\\n            }\\n            /* CASE 2: User repays more than his Comp borrow balance */\\n            else {\\n                underlyingToken.safeApprove(_cTokenAddress, onPoolInUnderlying);\\n                cToken.repayBorrow(onPoolInUnderlying); // Revert on error\\n                borrowBalanceInOf[_cTokenAddress][_borrower].onPool = 0;\\n                remainingToRepay -= onPoolInUnderlying; // In underlying\\n                emit BorrowerPositionUpdated(\\n                    _borrower,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    onPoolInUnderlying,\\n                    0,\\n                    0,\\n                    borrowIndex\\n                );\\n            }\\n            _updateBorrowerList(_cTokenAddress, _borrower);\\n        }\\n\\n        /* If there remains some tokens to repay (CASE 2), Morpho breaks credit lines and repair them either with other users or with Comp itself */\\n        if (remainingToRepay > 0) {\\n            uint256 p2pExchangeRate = marketsManagerForCompound.updateP2pUnitExchangeRate(\\n                _cTokenAddress\\n            );\\n            uint256 contractBorrowBalanceOnPool = cToken.borrowBalanceCurrent(address(this)); // In underlying\\n            /* CASE 1: Other borrowers are borrowing enough on Comp to compensate user's position */\\n            if (remainingToRepay <= contractBorrowBalanceOnPool) {\\n                borrowBalanceInOf[_cTokenAddress][_borrower].inP2P -= remainingToRepay.div(\\n                    p2pExchangeRate\\n                );\\n                _updateBorrowerList(_cTokenAddress, _borrower);\\n                _matchBorrowers(_cTokenAddress, remainingToRepay);\\n                emit BorrowerPositionUpdated(\\n                    _borrower,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    0,\\n                    remainingToRepay,\\n                    p2pExchangeRate,\\n                    0\\n                );\\n            }\\n            /* CASE 2: Other borrowers aren't borrowing enough on Comp to compensate user's position */\\n            else {\\n                borrowBalanceInOf[_cTokenAddress][_borrower].inP2P -= remainingToRepay.div(\\n                    p2pExchangeRate\\n                ); // In p2pUnit\\n                _updateBorrowerList(_cTokenAddress, _borrower);\\n                _matchBorrowers(_cTokenAddress, contractBorrowBalanceOnPool);\\n                emit BorrowerPositionUpdated(\\n                    _borrower,\\n                    _cTokenAddress,\\n                    0,\\n                    0,\\n                    0,\\n                    remainingToRepay,\\n                    p2pExchangeRate,\\n                    0\\n                );\\n                remainingToRepay -= contractBorrowBalanceOnPool;\\n                require(\\n                    _unmatchSuppliers(_cTokenAddress, remainingToRepay) == 0, // We break some P2P credit lines the user had with suppliers and fallback on Comp.\\n                    Errors.PM_REMAINING_TO_UNMATCH_IS_NOT_0\\n                );\\n            }\\n        }\\n\\n        emit Repaid(_borrower, _cTokenAddress, _amount);\\n    }\\n\\n    /** @dev Supplies ERC20 tokens to Comp.\\n     *  @param _cTokenAddress The address of the market the user wants to interact with.\\n     *  @param _amount The amount in ERC20 tokens to supply.\\n     */\\n    function _supplyERC20ToPool(address _cTokenAddress, uint256 _amount) internal {\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        IERC20 underlyingToken = IERC20(cToken.underlying());\\n        underlyingToken.safeApprove(_cTokenAddress, _amount);\\n        require(cToken.mint(_amount) == 0, Errors.PM_MINT_ON_COMP_FAIL);\\n    }\\n\\n    /** @dev Withdraws ERC20 tokens from Comp.\\n     *  @param _cTokenAddress The address of the market the user wants to interact with.\\n     *  @param _amount The amount of tokens to be withdrawn.\\n     */\\n    function _withdrawERC20FromComp(address _cTokenAddress, uint256 _amount) internal {\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        require(cToken.redeemUnderlying(_amount) == 0, Errors.PM_REDEEM_ON_COMP_FAIL);\\n    }\\n\\n    /** @dev Returns whether it is unsafe supply/witdhraw due to coumpound's revert on low levels of precision or not.\\n     *  @param _amount The amount of token considered for depositing/redeeming.\\n     *  @param _cTokenAddress cToken address of the considered market.\\n     *  @return Whether to continue or not.\\n     */\\n    function _isAboveCompoundThreshold(address _cTokenAddress, uint256 _amount)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        IERC20Metadata token = IERC20Metadata(ICErc20(_cTokenAddress).underlying());\\n        uint8 tokenDecimals = token.decimals();\\n        if (tokenDecimals > CTOKEN_DECIMALS)\\n            // Multiply by 2 to have a safety buffer\\n            return (_amount > 2 * 10**(tokenDecimals - CTOKEN_DECIMALS));\\n        else return true;\\n    }\\n\\n    /** @dev Returns whether the amount is above the precision threshold.\\n     *  @param _amount The amount moved.\\n     *  @param _rate1 The first rate to compare the amount with.\\n     *  @param _rate2 The second rate to compare the amount with.\\n     *  @return Whether this is above threshold or not.\\n     */\\n    function _isAbovePrecisionThreshold(\\n        uint256 _amount,\\n        uint256 _rate1,\\n        uint256 _rate2\\n    ) internal pure returns (bool) {\\n        return (_amount > _rate1 / 1e18 && _amount > _rate2 / 1e18);\\n    }\\n\\n    /** @dev Finds liquidity on Comp and matches it in P2P.\\n     *  @dev Note: p2pUnitExchangeRate must have been updated before calling this function.\\n     *  @param _cTokenAddress The address of the market on which Morpho want to move users.\\n     *  @param _amount The amount to search for in underlying.\\n     *  @return remainingToMatch The remaining liquidity to search for in underlying.\\n     */\\n    function _matchSuppliers(address _cTokenAddress, uint256 _amount)\\n        internal\\n        returns (uint256 remainingToMatch)\\n    {\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        remainingToMatch = _amount; // In underlying\\n        uint256 p2pExchangeRate = marketsManagerForCompound.p2pUnitExchangeRate(_cTokenAddress);\\n        uint256 cTokenExchangeRate = cToken.exchangeRateCurrent();\\n        address account = suppliersOnPool[_cTokenAddress].getHead();\\n        uint256 iterationCount;\\n        console.log(\\\"before remainingToMatch\\\", remainingToMatch);\\n        console.log(\\\"before account\\\", account);\\n        console.log(\\\"before tail\\\", suppliersOnPool[_cTokenAddress].getTail());\\n\\n        while (remainingToMatch > 0 && account != address(0) && iterationCount < NMAX) {\\n            iterationCount++;\\n            console.log(\\\"before iterationCount\\\", iterationCount);\\n            console.log(\\\"account\\\", account);\\n            console.log(\\\"loop remainingToMatch\\\", remainingToMatch);\\n            // Check if this user is not borrowing on Pool (cf Liquidation Invariant in docs)\\n            uint256 onPoolInUnderlying = supplyBalanceInOf[_cTokenAddress][account].onPool.mul(\\n                cTokenExchangeRate\\n            ); // In underlying\\n            uint256 toMatch = Math.min(onPoolInUnderlying, remainingToMatch);\\n            console.log(\\n                \\\"supplyBalanceInOf[_cTokenAddress][account].onPool\\\",\\n                supplyBalanceInOf[_cTokenAddress][account].onPool\\n            );\\n            console.log(\\\"onPoolInUnderlying\\\", onPoolInUnderlying);\\n            console.log(\\\"toMatch\\\", toMatch);\\n            if (_isAbovePrecisionThreshold(toMatch, p2pExchangeRate, cTokenExchangeRate)) {\\n                supplyBalanceInOf[_cTokenAddress][account].onPool -= toMatch.div(\\n                    cTokenExchangeRate\\n                ); // In cToken\\n                supplyBalanceInOf[_cTokenAddress][account].inP2P += toMatch.div(p2pExchangeRate); // In p2pUnit\\n            } else {\\n                supplyBalanceInOf[_cTokenAddress][account].onPool = 0;\\n            }\\n            remainingToMatch -= toMatch;\\n            console.log(\\\"remainingToMatch\\\", remainingToMatch);\\n            _updateSupplierList(_cTokenAddress, account);\\n            emit SupplierPositionUpdated(\\n                account,\\n                _cTokenAddress,\\n                0,\\n                toMatch,\\n                toMatch,\\n                0,\\n                p2pExchangeRate,\\n                cTokenExchangeRate\\n            );\\n            account = suppliersOnPool[_cTokenAddress].getHead();\\n            console.log(\\\"next account\\\", account);\\n        }\\n        // Withdraw from Comp\\n        console.log(\\\"remainingToMatch\\\", remainingToMatch);\\n        uint256 toWithdraw = _amount - remainingToMatch;\\n        if (_isAboveCompoundThreshold(_cTokenAddress, toWithdraw))\\n            _withdrawERC20FromComp(_cTokenAddress, toWithdraw);\\n    }\\n\\n    /** @dev Finds liquidity in peer-to-peer and unmatches it to reconnect Comp.\\n     *  @dev Note: p2pUnitExchangeRate must have been updated before calling this function.\\n     *  @param _cTokenAddress The address of the market on which Morpho want to move users.\\n     *  @param _amount The amount to search for in underlying.\\n     *  @return remainingToUnmatch The amount remaining to munmatchatch in underlying.\\n     */\\n    function _unmatchSuppliers(address _cTokenAddress, uint256 _amount)\\n        internal\\n        returns (uint256 remainingToUnmatch)\\n    {\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        remainingToUnmatch = _amount; // In underlying\\n        uint256 cTokenExchangeRate = cToken.exchangeRateCurrent();\\n        uint256 p2pExchangeRate = marketsManagerForCompound.p2pUnitExchangeRate(_cTokenAddress);\\n        address account = suppliersInP2P[_cTokenAddress].getHead();\\n\\n        while (remainingToUnmatch > 0 && account != address(0)) {\\n            uint256 inP2P = supplyBalanceInOf[_cTokenAddress][account].inP2P; // In cToken\\n            uint256 toUnmatch = Math.min(inP2P.mul(p2pExchangeRate), remainingToUnmatch); // In underlying\\n            if (_isAbovePrecisionThreshold(toUnmatch, p2pExchangeRate, cTokenExchangeRate)) {\\n                supplyBalanceInOf[_cTokenAddress][account].inP2P -= toUnmatch.div(p2pExchangeRate); // In p2pUnit\\n                supplyBalanceInOf[_cTokenAddress][account].onPool += toUnmatch.div(\\n                    cTokenExchangeRate\\n                ); // In cToken\\n            } else {\\n                supplyBalanceInOf[_cTokenAddress][account].inP2P = 0;\\n            }\\n            remainingToUnmatch -= toUnmatch;\\n            _updateSupplierList(_cTokenAddress, account);\\n            emit SupplierPositionUpdated(\\n                account,\\n                _cTokenAddress,\\n                toUnmatch,\\n                0,\\n                0,\\n                toUnmatch,\\n                p2pExchangeRate,\\n                cTokenExchangeRate\\n            );\\n            account = suppliersInP2P[_cTokenAddress].getHead();\\n        }\\n        // Supply on Comp\\n        uint256 toSupply = _amount - remainingToUnmatch;\\n        if (_isAboveCompoundThreshold(_cTokenAddress, toSupply))\\n            _supplyERC20ToPool(_cTokenAddress, toSupply);\\n    }\\n\\n    /** @dev Finds borrowers on Comp that match the given `_amount` and move them in P2P.\\n     *  @dev Note: p2pUnitExchangeRate must have been updated before calling this function.\\n     *  @param _cTokenAddress The address of the market on which Morpho wants to move users.\\n     *  @param _amount The amount to match in underlying.\\n     *  @return remainingToMatch The amount remaining to match in underlying.\\n     */\\n    function _matchBorrowers(address _cTokenAddress, uint256 _amount)\\n        internal\\n        returns (uint256 remainingToMatch)\\n    {\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        IERC20 underlyingToken = IERC20(cToken.underlying());\\n        remainingToMatch = _amount;\\n        uint256 p2pExchangeRate = marketsManagerForCompound.p2pUnitExchangeRate(_cTokenAddress);\\n        uint256 borrowIndex = cToken.borrowIndex();\\n        address account = borrowersOnPool[_cTokenAddress].getHead();\\n        uint256 iterationCount;\\n\\n        while (remainingToMatch > 0 && account != address(0) && iterationCount < NMAX) {\\n            iterationCount++;\\n            uint256 onPoolInUnderlying = borrowBalanceInOf[_cTokenAddress][account].onPool.mul(\\n                borrowIndex\\n            ); // In underlying\\n            uint256 toMatch = Math.min(onPoolInUnderlying, remainingToMatch);\\n            if (_isAbovePrecisionThreshold(toMatch, borrowIndex, p2pExchangeRate)) {\\n                borrowBalanceInOf[_cTokenAddress][account].onPool -= toMatch.div(borrowIndex);\\n                borrowBalanceInOf[_cTokenAddress][account].inP2P += toMatch.div(p2pExchangeRate);\\n            } else {\\n                borrowBalanceInOf[_cTokenAddress][account].onPool = 0;\\n            }\\n            remainingToMatch -= toMatch;\\n            _updateBorrowerList(_cTokenAddress, account);\\n            emit BorrowerPositionUpdated(\\n                account,\\n                _cTokenAddress,\\n                0,\\n                toMatch,\\n                toMatch,\\n                0,\\n                p2pExchangeRate,\\n                borrowIndex\\n            );\\n            account = borrowersOnPool[_cTokenAddress].getHead();\\n        }\\n        // Repay Comp\\n        uint256 toRepay = Math.min(\\n            _amount - remainingToMatch,\\n            cToken.borrowBalanceCurrent(address(this))\\n        );\\n        underlyingToken.safeApprove(_cTokenAddress, toRepay);\\n        require(cToken.repayBorrow(toRepay) == 0, Errors.PM_REPAY_ON_COMP_FAIL);\\n    }\\n\\n    /** @dev Finds borrowers in peer-to-peer that match the given `_amount` and move them to Comp.\\n     *  @dev Note: p2pUnitExchangeRate must have been updated before calling this function.\\n     *  @param _cTokenAddress The address of the market on which Morpho wants to move users.\\n     *  @param _amount The amount to match in underlying.\\n     *  @return remainingToUnmatch The amount remaining to munmatchatch in underlying.\\n     */\\n    function _unmatchBorrowers(address _cTokenAddress, uint256 _amount)\\n        internal\\n        returns (uint256 remainingToUnmatch)\\n    {\\n        ICErc20 cToken = ICErc20(_cTokenAddress);\\n        remainingToUnmatch = _amount;\\n        uint256 p2pExchangeRate = marketsManagerForCompound.p2pUnitExchangeRate(_cTokenAddress);\\n        uint256 borrowIndex = cToken.borrowIndex();\\n        address account = borrowersInP2P[_cTokenAddress].getHead();\\n\\n        console.log(\\\"_unmatchBorrowers\\\", _amount);\\n        console.log(\\\"account\\\", account);\\n\\n        while (remainingToUnmatch > 0 && account != address(0)) {\\n            uint256 inP2P = borrowBalanceInOf[_cTokenAddress][account].inP2P;\\n            uint256 toUnmatch = Math.min(inP2P.mul(p2pExchangeRate), remainingToUnmatch); // In underlying\\n            if (_isAbovePrecisionThreshold(toUnmatch, borrowIndex, p2pExchangeRate)) {\\n                borrowBalanceInOf[_cTokenAddress][account].onPool += toUnmatch.div(borrowIndex);\\n                borrowBalanceInOf[_cTokenAddress][account].inP2P -= toUnmatch.div(p2pExchangeRate);\\n            } else {\\n                borrowBalanceInOf[_cTokenAddress][account].inP2P = 0;\\n            }\\n            remainingToUnmatch -= toUnmatch;\\n            _updateBorrowerList(_cTokenAddress, account);\\n            emit BorrowerPositionUpdated(\\n                account,\\n                _cTokenAddress,\\n                toUnmatch,\\n                0,\\n                0,\\n                toUnmatch,\\n                p2pExchangeRate,\\n                borrowIndex\\n            );\\n            account = borrowersInP2P[_cTokenAddress].getHead();\\n        }\\n        // Borrow on Comp\\n        console.log(\\\"remainingToUnmatch\\\", remainingToUnmatch);\\n        require(cToken.borrow(_amount - remainingToUnmatch) == 0);\\n    }\\n\\n    /**\\n     * @dev Enters the user into the market if he is not already there.\\n     * @param _account The address of the account to update.\\n     * @param _cTokenAddress The address of the market to check.\\n     */\\n    function _handleMembership(address _cTokenAddress, address _account) internal {\\n        if (!accountMembership[_cTokenAddress][_account]) {\\n            accountMembership[_cTokenAddress][_account] = true;\\n            enteredMarkets[_account].push(_cTokenAddress);\\n        }\\n    }\\n\\n    /** @dev Checks whether the user can borrow/withdraw or not.\\n     *  @param _account The user to determine liquidity for.\\n     *  @param _cTokenAddress The market to hypothetically withdraw/borrow in.\\n     *  @param _withdrawnAmount The number of tokens to hypothetically withdraw.\\n     *  @param _borrowedAmount The amount of underlying to hypothetically borrow.\\n     */\\n    function _checkAccountLiquidity(\\n        address _account,\\n        address _cTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) internal {\\n        (uint256 debtValue, uint256 maxDebtValue, ) = _getUserHypotheticalBalanceStates(\\n            _account,\\n            _cTokenAddress,\\n            _withdrawnAmount,\\n            _borrowedAmount\\n        );\\n        require(debtValue <= maxDebtValue, Errors.PM_DEBT_VALUE_ABOVE_MAX);\\n    }\\n\\n    /** @dev Returns the debt value, max debt value and collateral value of a given user.\\n     *  @param _account The user to determine liquidity for.\\n     *  @param _cTokenAddress The market to hypothetically withdraw/borrow in.\\n     *  @param _withdrawnAmount The number of tokens to hypothetically withdraw.\\n     *  @param _borrowedAmount The amount of underlying to hypothetically borrow.\\n     *  @return (debtValue, maxDebtValue collateralValue).\\n     */\\n    function _getUserHypotheticalBalanceStates(\\n        address _account,\\n        address _cTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Avoid stack too deep error\\n        BalanceStateVars memory vars;\\n        ICompoundOracle compoundOracle = ICompoundOracle(comptroller.oracle());\\n\\n        for (uint256 i; i < enteredMarkets[_account].length; i++) {\\n            vars.cTokenEntered = enteredMarkets[_account][i];\\n            vars.p2pExchangeRate = marketsManagerForCompound.updateP2pUnitExchangeRate(\\n                vars.cTokenEntered\\n            );\\n            // Calculation of the current debt (in underlying)\\n            vars.debtToAdd =\\n                borrowBalanceInOf[vars.cTokenEntered][_account].onPool.mul(\\n                    ICErc20(vars.cTokenEntered).borrowIndex()\\n                ) +\\n                borrowBalanceInOf[vars.cTokenEntered][_account].inP2P.mul(vars.p2pExchangeRate);\\n            // Calculation of the current collateral (in underlying)\\n            vars.collateralToAdd =\\n                supplyBalanceInOf[vars.cTokenEntered][_account].onPool.mul(\\n                    ICErc20(vars.cTokenEntered).exchangeRateCurrent()\\n                ) +\\n                supplyBalanceInOf[vars.cTokenEntered][_account].inP2P.mul(vars.p2pExchangeRate);\\n            // Price recovery\\n            vars.underlyingPrice = compoundOracle.getUnderlyingPrice(vars.cTokenEntered);\\n            require(vars.underlyingPrice != 0, Errors.PM_ORACLE_FAIL);\\n\\n            if (_cTokenAddress == vars.cTokenEntered) {\\n                vars.debtToAdd += _borrowedAmount;\\n                vars.redeemedValue = _withdrawnAmount.mul(vars.underlyingPrice);\\n            }\\n            // Conversion of the collateral to dollars\\n            vars.collateralToAdd = vars.collateralToAdd.mul(vars.underlyingPrice);\\n            // Add the debt in this market to the global debt (in dollars)\\n            vars.debtValue += vars.debtToAdd.mul(vars.underlyingPrice);\\n            // Add the collateral value in this asset to the global collateral value (in dollars)\\n            vars.collateralValue += vars.collateralToAdd;\\n            (, uint256 collateralFactorMantissa, ) = comptroller.markets(vars.cTokenEntered);\\n            // Add the max debt value allowed by the collateral in this asset to the global max debt value (in dollars)\\n            vars.maxDebtValue += vars.collateralToAdd.mul(collateralFactorMantissa);\\n        }\\n\\n        vars.collateralValue -= vars.redeemedValue;\\n\\n        return (vars.debtValue, vars.maxDebtValue, vars.collateralValue);\\n    }\\n\\n    /** @dev Updates borrowers tree with the new balances of a given account.\\n     *  @param _cTokenAddress The address of the market on which Morpho want to update the borrower lists.\\n     *  @param _account The address of the borrower to move.\\n     */\\n    function _updateBorrowerList(address _cTokenAddress, address _account) internal {\\n        uint256 onPool = borrowBalanceInOf[_cTokenAddress][_account].onPool;\\n        uint256 inP2P = borrowBalanceInOf[_cTokenAddress][_account].inP2P;\\n        uint256 formerValueOnPool = borrowersOnPool[_cTokenAddress].getValueOf(_account);\\n        uint256 formerValueInP2P = borrowersInP2P[_cTokenAddress].getValueOf(_account);\\n\\n        // Check pool\\n        bool wasOnPoolAndValueChanged = formerValueOnPool != 0 && formerValueOnPool != onPool;\\n        if (wasOnPoolAndValueChanged) borrowersOnPool[_cTokenAddress].remove(_account);\\n        if (onPool > 0 && (wasOnPoolAndValueChanged || formerValueOnPool == 0))\\n            borrowersOnPool[_cTokenAddress].insertSorted(_account, onPool, NMAX);\\n\\n        // Check P2P\\n        bool wasInP2PAndValueChanged = formerValueInP2P != 0 && formerValueInP2P != inP2P;\\n        if (wasInP2PAndValueChanged) borrowersInP2P[_cTokenAddress].remove(_account);\\n        if (inP2P > 0 && (wasInP2PAndValueChanged || formerValueInP2P == 0))\\n            borrowersInP2P[_cTokenAddress].insertSorted(_account, inP2P, NMAX);\\n    }\\n\\n    /** @dev Updates suppliers tree with the new balances of a given account.\\n     *  @param _cTokenAddress The address of the market on which Morpho want to update the supplier lists.\\n     *  @param _account The address of the supplier to move.\\n     */\\n    function _updateSupplierList(address _cTokenAddress, address _account) internal {\\n        console.log(\\\"update account\\\", _account);\\n        console.log(\\\"update on cToken\\\", _cTokenAddress);\\n        uint256 onPool = supplyBalanceInOf[_cTokenAddress][_account].onPool;\\n        uint256 inP2P = supplyBalanceInOf[_cTokenAddress][_account].inP2P;\\n        console.log(\\\"onPool\\\", onPool);\\n        uint256 formerValueOnPool = suppliersOnPool[_cTokenAddress].getValueOf(_account);\\n        uint256 formerValueInP2P = suppliersInP2P[_cTokenAddress].getValueOf(_account);\\n        console.log(\\\"formerValueOnPool\\\", formerValueOnPool);\\n\\n        // Check pool\\n        bool wasOnPoolAndValueChanged = formerValueOnPool != 0 && formerValueOnPool != onPool;\\n        console.log(\\\"wasOnPoolAndValueChanged\\\", wasOnPoolAndValueChanged);\\n        if (wasOnPoolAndValueChanged) suppliersOnPool[_cTokenAddress].remove(_account);\\n        if (onPool > 0 && (wasOnPoolAndValueChanged || formerValueOnPool == 0)) {\\n            console.log(\\\"inserted\\\", onPool);\\n            suppliersOnPool[_cTokenAddress].insertSorted(_account, onPool, NMAX);\\n            console.log(\\\"value after\\\", suppliersOnPool[_cTokenAddress].getValueOf(_account));\\n        }\\n\\n        // Check P2P\\n        bool wasInP2PAndValueChanged = formerValueInP2P != 0 && formerValueInP2P != inP2P;\\n        if (wasInP2PAndValueChanged) suppliersInP2P[_cTokenAddress].remove(_account);\\n        if (inP2P > 0 && (wasInP2PAndValueChanged || formerValueInP2P == 0))\\n            suppliersInP2P[_cTokenAddress].insertSorted(_account, inP2P, NMAX);\\n    }\\n}\\n\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"},\"contracts/compound/libraries/CompoundMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity 0.8.7;\\n\\n/**\\n *  @title CompoundMath\\n *  @dev library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\n */\\nlibrary CompoundMath {\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n}\\n\"},\"contracts/compound/libraries/DoubleLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nlibrary DoubleLinkedList {\\n    struct Account {\\n        address id;\\n        address next;\\n        address prev;\\n        uint256 value;\\n        bool isIn;\\n    }\\n\\n    struct List {\\n        mapping(address => Account) accounts;\\n        address head;\\n        address tail;\\n        uint256 counter;\\n    }\\n\\n    /** @dev Returns the `account` linked to `_id`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @return account The account linked to `_id`.\\n     */\\n    function get(List storage _list, address _id) internal view returns (Account memory account) {\\n        return _list.accounts[_id];\\n    }\\n\\n    /** @dev Returns the `account` linked to `_id`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @return value The value of the account.\\n     */\\n    function getValueOf(List storage _list, address _id) internal view returns (uint256) {\\n        return _list.accounts[_id].value;\\n    }\\n\\n    /** @dev Returns the next id address from the current `_id`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @return account The account linked to `_id`.\\n     */\\n    function getNext(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].next;\\n    }\\n\\n    /** @dev Adds an `_id` and its value to the head of the `_list`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @param _value The value of the account.\\n     *  @return bool Whether the account has been added or not.\\n     */\\n    function addHead(\\n        List storage _list,\\n        address _id,\\n        uint256 _value\\n    ) internal returns (bool) {\\n        if (!_contains(_list, _id)) {\\n            _createAccount(_list, _id, _value);\\n            _link(_list, _id, _list.head);\\n            _setHead(_list, _id);\\n            if (_list.tail == address(0)) _setTail(_list, _id);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /** @dev Adds an `_id` and its value to the tail of the `_list`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @param _value The value of the account.\\n     *  @return bool Whether the account has been added or not.\\n     */\\n    function addTail(\\n        List storage _list,\\n        address _id,\\n        uint256 _value\\n    ) internal returns (bool) {\\n        if (!_contains(_list, _id)) {\\n            if (_list.head == address(0)) {\\n                addHead(_list, _id, _value);\\n            } else {\\n                _createAccount(_list, _id, _value);\\n                _link(_list, _list.tail, _id);\\n                _setTail(_list, _id);\\n            }\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /** @dev Removes an account of the `_list`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @return bool Whether the account has been removed or not.\\n     */\\n    function remove(List storage _list, address _id) internal returns (bool) {\\n        if (_contains(_list, _id)) {\\n            Account memory account = _list.accounts[_id];\\n            if (_list.head == _id && _list.tail == _id) {\\n                _setHead(_list, address(0));\\n                _setTail(_list, address(0));\\n            } else if (_list.head == _id) {\\n                _setHead(_list, account.next);\\n                _list.accounts[account.next].prev = address(0);\\n            } else if (_list.tail == _id) {\\n                _setTail(_list, account.prev);\\n                _list.accounts[account.prev].next = address(0);\\n            } else {\\n                _link(_list, account.prev, account.next);\\n            }\\n            _list.counter -= 1;\\n            delete _list.accounts[account.id];\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /** @dev Inserts an account in the `_list` at the right slot based on its `_value`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @param _value The value of the account.\\n     *  @param _maxIterations The max number of iterations.\\n     */\\n    function insertSorted(\\n        List storage _list,\\n        address _id,\\n        uint256 _value,\\n        uint256 _maxIterations\\n    ) internal {\\n        require(!_contains(_list, _id));\\n        address current = _list.head;\\n        uint256 numberOfIterations;\\n        while (\\n            numberOfIterations <= _maxIterations &&\\n            current != _list.tail &&\\n            _list.accounts[current].value > _value\\n        ) {\\n            current = _list.accounts[current].next;\\n            numberOfIterations++;\\n        }\\n        if (numberOfIterations == _maxIterations + 1) {\\n            require(addTail(_list, _id, _value));\\n        } else {\\n            require(insertBefore(_list, current, _id, _value));\\n        }\\n    }\\n\\n    /** @dev Inserts an account in the `_list` before `_nextId`.\\n     *  @param _list The list to search in.\\n     *  @param _nextId The account id from which to insert the account before.\\n     *  @param _id The address of the account.\\n     *  @param _value The value of the account.\\n     */\\n    function insertBefore(\\n        List storage _list,\\n        address _nextId,\\n        address _id,\\n        uint256 _value\\n    ) internal returns (bool) {\\n        require(!_contains(_list, _id));\\n        if (_nextId == _list.tail) {\\n            return addTail(_list, _id, _value);\\n        } else {\\n            Account memory nextAccount = _list.accounts[_nextId];\\n            Account memory prevAccount = _list.accounts[nextAccount.prev];\\n            _createAccount(_list, _id, _value);\\n            _link(_list, _id, nextAccount.id);\\n            _link(_list, prevAccount.id, _id);\\n            return true;\\n        }\\n    }\\n\\n    /** @dev Returns whether or not the account is in the `_list`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @return whether or not the account is in the `_list`.\\n     */\\n    function contains(List storage _list, address _id) internal view returns (bool) {\\n        return _contains(_list, _id);\\n    }\\n\\n    /** @dev Returns the length of the `_list`.\\n     *  @param _list The list to get the length.\\n     *  @return The length.\\n     */\\n    function length(List storage _list) internal view returns (uint256) {\\n        return _length(_list);\\n    }\\n\\n    /** @dev Returns the address at the head of the `_list`.\\n     *  @param _list The list to get the head.\\n     *  @return The address.\\n     */\\n    function getHead(List storage _list) internal view returns (address) {\\n        return _list.head;\\n    }\\n\\n    /** @dev Returns the address at the tail of the `_list`.\\n     *  @param _list The list to get the tail.\\n     *  @return The address.\\n     */\\n    function getTail(List storage _list) internal view returns (address) {\\n        return _list.tail;\\n    }\\n\\n    /** @dev Sets the head of the `_list`.\\n     *  @param _list The list to set the head.\\n     */\\n    function _setHead(List storage _list, address _id) private {\\n        _list.head = _id;\\n    }\\n\\n    /** @dev Sets the tail of the `_list`.\\n     *  @param _list The list to set the tail.\\n     */\\n    function _setTail(List storage _list, address _id) private {\\n        _list.tail = _id;\\n    }\\n\\n    /** @dev Creates an account based on its `_id` and `_value`.\\n     *  @param _list The list to set the tail.\\n     *  @param _id The address of the account.\\n     *  @param _value The value of the account.\\n     */\\n    function _createAccount(\\n        List storage _list,\\n        address _id,\\n        uint256 _value\\n    ) private {\\n        _list.counter += 1;\\n        Account memory account = Account(_id, address(0), address(0), _value, true);\\n        _list.accounts[_id] = account;\\n    }\\n\\n    /** @dev Links an account to its previous and next accounts.\\n     *  @param _list The list to set the tail.\\n     *  @param _prevId The address of the previous account.\\n     *  @param _nextId The address of the next account.\\n     */\\n    function _link(\\n        List storage _list,\\n        address _prevId,\\n        address _nextId\\n    ) private {\\n        _list.accounts[_prevId].next = _nextId;\\n        _list.accounts[_nextId].prev = _prevId;\\n    }\\n\\n    /** @dev Returns whether or not the account is in the `_list`.\\n     *  @param _list The list to search in.\\n     *  @param _id The address of the account.\\n     *  @return whether or not the account is in the `_list`.\\n     */\\n    function _contains(List storage _list, address _id) private view returns (bool) {\\n        return _list.accounts[_id].isIn;\\n    }\\n\\n    /** @dev Returns the length of the `_list`.\\n     *  @param _list The list to get the length.\\n     *  @return The length.\\n     */\\n    function _length(List storage _list) private view returns (uint256) {\\n        return _list.counter;\\n    }\\n}\\n\"},\"contracts/compound/libraries/ErrorsForCompound.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.7;\\n\\nlibrary Errors {\\n    string public constant MM_MARKET_NOT_CREATED = \\\"0\\\";\\n    string public constant MM_POSITIONS_MANAGER_SET = \\\"1\\\";\\n    string public constant MM_MARKET_ALREADY_CREATED = \\\"2\\\";\\n    string public constant MM_MARKET_CREATED_FAIL_ON_COMP = \\\"3\\\";\\n    string public constant PM_MARKET_NOT_CREATED = \\\"4\\\";\\n    string public constant PM_AMOUNT_NOT_ABOVE_THRESHOLD = \\\"5\\\";\\n    string public constant PM_ONLY_MARKETS_MANAGER = \\\"6\\\";\\n    string public constant PM_AMOUNT_IS_0 = \\\"7\\\";\\n    string public constant PM_DEBT_VALUE_NOT_ABOVE_MAX = \\\"8\\\";\\n    string public constant PM_AMOUNT_ABOVE_ALLOWED_TO_REPAY = \\\"9\\\";\\n    string public constant PM_TO_SEIZE_ABOVE_COLLATERAL = \\\"10\\\";\\n    string public constant PM_REMAINING_TO_MATCH_IS_NOT_0 = \\\"11\\\";\\n    string public constant PM_REMAINING_TO_UNMATCH_IS_NOT_0 = \\\"12\\\";\\n    string public constant PM_DEBT_VALUE_ABOVE_MAX = \\\"13\\\";\\n    string public constant PM_BORROW_ON_COMP_FAIL = \\\"14\\\";\\n    string public constant PM_MINT_ON_COMP_FAIL = \\\"15\\\";\\n    string public constant PM_REDEEM_ON_COMP_FAIL = \\\"16\\\";\\n    string public constant PM_REPAY_ON_COMP_FAIL = \\\"17\\\";\\n    string public constant PM_ORACLE_FAIL = \\\"18\\\";\\n}\\n\"},\"contracts/compound/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.7;\\n\\ninterface ICErc20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256); // The user's underlying balance, representing their assets in the protocol, is equal to the user's cToken balance multiplied by the Exchange Rate.\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    function liquidationIncentiveMantissa() external returns (uint256);\\n\\n    function closeFactorMantissa() external returns (uint256);\\n\\n    function oracle() external returns (address);\\n\\n    function markets(address)\\n        external\\n        returns (\\n            bool,\\n            uint256,\\n            bool\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"},\"contracts/compound/interfaces/IMarketsManagerForCompound.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.7;\\n\\ninterface IMarketsManagerForCompound {\\n    function isCreated(address _marketAddress) external returns (bool);\\n\\n    function p2pBPY(address _marketAddress) external returns (uint256);\\n\\n    function collateralFactor(address _marketAddress) external returns (uint256);\\n\\n    function liquidationIncentive(address _marketAddress) external returns (uint256);\\n\\n    function p2pUnitExchangeRate(address _marketAddress) external returns (uint256);\\n\\n    function lastUpdateBlockNumber(address _marketAddress) external returns (uint256);\\n\\n    function threshold(address _marketAddress) external returns (uint256);\\n\\n    function updateP2pUnitExchangeRate(address _marketAddress) external returns (uint256);\\n}\\n\"}}}","address":"0x4C2F7092C2aE51D986bEFEe378e50BD4dB99C901","bytecode":"0x60806040526001805461ffff191660141790553480156200001f57600080fd5b5060405162005e4b38038062005e4b833981016040819052620000429162000096565b6001600055600c80546001600160a01b039384166001600160a01b031991821617909155600b8054929093169116179055620000ce565b80516001600160a01b03811681146200009157600080fd5b919050565b60008060408385031215620000aa57600080fd5b620000b58362000079565b9150620000c56020840162000079565b90509250929050565b615d6d80620000de6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80639df5a1f2116100a2578063c86ec2bf11610071578063c86ec2bf14610294578063e34b5145146102c2578063e501ed04146102d5578063f2b9fdb814610307578063f3fef3a31461031a57600080fd5b80639df5a1f214610241578063aab3f8681461025b578063b23a76cc1461026e578063b866f7291461028157600080fd5b80637c108333116100de5780637c10833314610189578063947574ac146101a95780639ace3ada146101f05780639d8799901461022e57600080fd5b806312e5222c1461011057806322867d78146101365780634b8a35291461014b5780635fe3b5671461015e575b600080fd5b60015461011e9061ffff1681565b60405161ffff90911681526020015b60405180910390f35b61014961014436600461572f565b61032d565b005b61014961015936600461572f565b610372565b600b54610171906001600160a01b031681565b6040516001600160a01b03909116815260200161012d565b61019c61019736600461566b565b6108d5565b60405161012d919061596c565b6101db6101b73660046156a5565b60076020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161012d565b61021e6101fe3660046156a5565b600860209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161012d565b61014961023c36600461572f565b6109ee565b610249600881565b60405160ff909116815260200161012d565b6101496102693660046156de565b610a4f565b61014961027c366004615877565b611218565b600c54610171906001600160a01b031681565b6102b46102a236600461566b565b600a6020526000908152604090205481565b60405190815260200161012d565b6101716102d036600461572f565b611275565b6101db6102e33660046156a5565b60066020908152600092835260408084209091529082529020805460019091015482565b61014961031536600461572f565b6112ad565b61014961032836600461572f565b611866565b600260005414156103595760405162461bcd60e51b815260040161035090615a4f565b60405180910390fd5b600260005561036982338361189a565b50506001600055565b600260005414156103955760405162461bcd60e51b815260040161035090615a4f565b6002600055600c54604051637c01394b60e11b81526001600160a01b0380851660048301528492169063f802729690602401602060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190615820565b604051806040016040528060018152602001600d60fa1b815250906104515760405162461bcd60e51b815260040161035091906159cc565b508282600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002054811015604051806040016040528060018152602001603560f81b815250906104b55760405162461bcd60e51b815260040161035091906159cc565b506104c08533612040565b6104cd33866000876120cd565b6040518481526001600160a01b0386169033907f3fc499aeb0bb1cb58b6de8b02b3f86f4e7394e9690bef0110e32ced8a56310459060200160405180910390a360008590506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105859190615688565b6001600160a01b038816600090815260036020526040812091925087916105b690600101546001600160a01b031690565b6001600160a01b0316146106f357600c5460405163303e07b560e11b81526001600160a01b038a81166004830152600092169063607c0f6a90602401602060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610644919061589b565b90506106508989612127565b9150600061065e838a615bcd565b905080156106f05761067081836126db565b6001600160a01b038b166000908152600760209081526040808320338452909152812080549091906106a3908490615a86565b90915550506040516001600160a01b038b16903390600080516020615cc7833981519152906106de906000908690829081908a9082906159a4565b60405180910390a36106f08a33612720565b50505b80156108b25760405163317afabb60e21b8152600481018290526001600160a01b0384169063c5ebeaec90602401602060405180830381600087803b15801561073b57600080fd5b505af115801561074f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610773919061589b565b6040805180820190915260028152610c4d60f21b602082015290156107ab5760405162461bcd60e51b815260040161035091906159cc565b506000836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610821919061589b565b905061082d82826126db565b6001600160a01b038a16600090815260076020908152604080832033845290915281206001018054909190610863908490615a86565b90915550506040516001600160a01b038a16903390600080516020615cc78339815191529061089e90869060009081908190899082906159a4565b60405180910390a36108b08933612720565b505b6108c66001600160a01b038316338961289b565b50506001600055505050505050565b600c546040805180820190915260018152601b60f91b60208201526060916001600160a01b0316331461091b5760405162461bcd60e51b815260040161035091906159cc565b5060408051600180825281830190925260009160208083019080368337019050509050828160008151811061095257610952615c64565b6001600160a01b039283166020918202929092010152600b54604051631853304760e31b815291169063c29982389061098f90849060040161591f565b600060405180830381600087803b1580156109a957600080fd5b505af11580156109bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e5919081019061575b565b9150505b919050565b600c546040805180820190915260018152601b60f91b6020820152906001600160a01b03163314610a325760405162461bcd60e51b815260040161035091906159cc565b506001600160a01b039091166000908152600a6020526040902055565b60026000541415610a725760405162461bcd60e51b815260040161035090615a4f565b60026000556040805180820190915260018152603760f81b602082015281610aad5760405162461bcd60e51b815260040161035091906159cc565b50600080610abf846000806000612903565b5091509150808211604051806040016040528060018152602001600760fb1b81525090610aff5760405162461bcd60e51b815260040161035091906159cc565b50610b326040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b600c5460405163303e07b560e11b81526001600160a01b038981166004830152610bdf92169063607c0f6a90602401602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb3919061589b565b6001600160a01b03808a166000908152600760209081526040808320938b168352929052205490612f60565b610c84886001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c55919061589b565b6001600160a01b03808b166000908152600760209081526040808320938c168352929052206001015490612f60565b610c8e9190615a86565b8152600b546040805163743aaa2360e11b81529051610d18926001600160a01b03169163e87554469160048083019260209291908290030181600087803b158015610cd857600080fd5b505af1158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d10919061589b565b825190612f60565b841115604051806040016040528060018152602001603960f81b81525090610d535760405162461bcd60e51b815260040161035091906159cc565b50610d5f87868661189a565b600b54604080516307dc0d1d60e41b815290516000926001600160a01b031691637dc0d1d091600480830192602092919082900301818787803b158015610da557600080fd5b505af1158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddd9190615688565b60405163fc57d4df60e01b81526001600160a01b0389811660048301529192509082169063fc57d4df9060240160206040518083038186803b158015610e2257600080fd5b505afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a919061589b565b606083015260405163fc57d4df60e01b81526001600160a01b03898116600483015282169063fc57d4df9060240160206040518083038186803b158015610ea057600080fd5b505afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed8919061589b565b6040830152606082015115801590610ef35750604082015115155b60405180604001604052806002815260200161031360f41b81525090610f2c5760405162461bcd60e51b815260040161035091906159cc565b506000879050610fe18360600151610fdb600b60009054906101000a90046001600160a01b03166001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f8d57600080fd5b505af1158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc5919061589b565b6040870151610fd5908b90612f60565b90612f60565b906126db565b83602001818152505061108d816001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561102657600080fd5b505afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e919061589b565b6001600160a01b03808b166000908152600660209081526040808320938d168352929052206001015490612f60565b6080840152600c546040516386779faf60e01b81526001600160a01b038a81166004830152600092611143929116906386779faf90602401602060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611117919061589b565b6001600160a01b03808c166000908152600660209081526040808320938e168352929052205490612f60565b84608001516111529190615a86565b9050808460200151111560405180604001604052806002815260200161031360f41b815250906111955760405162461bcd60e51b815260040161035091906159cc565b50602080850151604080518a81526001600160a01b038e811694820194909452908101919091528a821660608201529089169033907f0faf8457a629c914788088ce89fee895fb0c27a621efc744e4571c76179869b19060800160405180910390a36112078985602001518a33612f75565b505060016000555050505050505050565b600c546040805180820190915260018152601b60f91b6020820152906001600160a01b0316331461125c5760405162461bcd60e51b815260040161035091906159cc565b506001805461ffff191661ffff92909216919091179055565b6009602052816000526040600020818154811061129157600080fd5b6000918252602090912001546001600160a01b03169150829050565b600260005414156112d05760405162461bcd60e51b815260040161035090615a4f565b6002600055600c54604051637c01394b60e11b81526001600160a01b0380851660048301528492169063f802729690602401602060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113549190615820565b604051806040016040528060018152602001600d60fa1b8152509061138c5760405162461bcd60e51b815260040161035091906159cc565b508282600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002054811015604051806040016040528060018152602001603560f81b815250906113f05760405162461bcd60e51b815260040161035091906159cc565b5061141b6040518060400160405280600881526020016739bab8383634b2b960c11b815250336137b6565b6114446040518060400160405280600781526020016617d85b5bdd5b9d60ca1b815250856137fb565b6114746040518060400160405280600e81526020016d5f63546f6b656e4164647265737360901b815250866137b6565b61147e8533612040565b60008590506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190615688565b905061150d6001600160a01b038216333089613840565b6040518681526001600160a01b0388169033907f523322d7afb07cee28d04498651096af062004e1f14315eff2e4a60290dfadda9060200160405180910390a36000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561158a57600080fd5b505af115801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c2919061589b565b6001600160a01b038916600090815260056020526040812091925088916115f390600101546001600160a01b031690565b6001600160a01b0316146117645761163560405180604001604052806013815260200172626f72726f7765727273206f6e20706f6f6c3f60681b81525061387e565b600c546040516386779faf60e01b81526001600160a01b038b8116600483015260009216906386779faf90602401602060405180830381600087803b15801561167d57600080fd5b505af1158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b5919061589b565b90506116c18a8a6138c4565b915060006116cf838b615bcd565b90508015611761576116e181836126db565b6001600160a01b038c16600090815260066020908152604080832033845290915281208054909190611714908490615a86565b90915550506040516001600160a01b038c16903390600080516020615d188339815191529061174f906000908690829081908a9082906159a4565b60405180910390a36117618b33613d99565b50505b8015611856576117a86040518060400160405280601881526020017f72656d61696e696e67546f537570706c79546f506f6f6c3f000000000000000081525061387e565b6117b289826140a1565b15611856576117c181836126db565b6001600160a01b038a166000908152600660209081526040808320338452909152812060010180549091906117f7908490615a86565b90915550611807905089826141cf565b886001600160a01b0316336001600160a01b0316600080516020615d188339815191528360008060008089604051611844969594939291906159a4565b60405180910390a36118568933613d99565b5050600160005550505050505050565b600260005414156118895760405162461bcd60e51b815260040161035090615a4f565b600260005561036982823380612f75565b600c54604051637c01394b60e11b81526001600160a01b0380861660048301528592169063f802729690602401602060405180830381600087803b1580156118e157600080fd5b505af11580156118f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119199190615820565b604051806040016040528060018152602001600d60fa1b815250906119515760405162461bcd60e51b815260040161035091906159cc565b506040805180820190915260018152603760f81b6020820152826119885760405162461bcd60e51b815260040161035091906159cc565b5060008490506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156119c957600080fd5b505afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a019190615688565b9050611a186001600160a01b038216333087613840565b6001600160a01b03808716600090815260076020908152604080832093891683529290522060010154849015611d40576000836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611a8557600080fd5b505af1158015611a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abd919061589b565b6001600160a01b03808a166000908152600760209081526040808320938c1683529290529081206001015491925090611af69083612f60565b9050808711611c2757611b136001600160a01b0385168a89614316565b60405163073a938160e11b8152600481018890526001600160a01b03861690630e75270290602401602060405180830381600087803b158015611b5557600080fd5b505af1158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d919061589b565b50611b9887836126db565b6001600160a01b03808b166000908152600760209081526040808320938d1683529290529081206001018054909190611bd2908490615bcd565b9250508190555060009250886001600160a01b0316886001600160a01b0316600080516020615cc78339815191526000808b60008089604051611c1a969594939291906159a4565b60405180910390a3611d33565b611c3b6001600160a01b0385168a83614316565b60405163073a938160e11b8152600481018290526001600160a01b03861690630e75270290602401602060405180830381600087803b158015611c7d57600080fd5b505af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb5919061589b565b506001600160a01b03808a166000908152600760209081526040808320938c16835292905290812060010155611ceb8184615bcd565b9250886001600160a01b0316886001600160a01b0316600080516020615cc78339815191526000808560008089604051611d2a969594939291906159a4565b60405180910390a35b611d3d8989612720565b50505b8015611fea57600c546040516386779faf60e01b81526001600160a01b03898116600483015260009216906386779faf90602401602060405180830381600087803b158015611d8e57600080fd5b505af1158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc6919061589b565b6040516305eff7ef60e21b81523060048201529091506000906001600160a01b038616906317bfdfbc90602401602060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e45919061589b565b9050808311611ef557611e5883836126db565b6001600160a01b03808b166000908152600760209081526040808320938d1683529290529081208054909190611e8f908490615bcd565b90915550611e9f90508989612720565b611ea989846138c4565b50886001600160a01b0316886001600160a01b0316600080516020615cc7833981519152600080600088886000604051611ee8969594939291906159a4565b60405180910390a3611fe7565b611eff83836126db565b6001600160a01b03808b166000908152600760209081526040808320938d1683529290529081208054909190611f36908490615bcd565b90915550611f4690508989612720565b611f5089826138c4565b50886001600160a01b0316886001600160a01b0316600080516020615cc7833981519152600080600088886000604051611f8f969594939291906159a4565b60405180910390a3611fa18184615bcd565b9250611fad898461443a565b604080518082019091526002815261189960f11b60208201529015611fe55760405162461bcd60e51b815260040161035091906159cc565b505b50505b866001600160a01b0316866001600160a01b03167f0a3fbbea70e93f2daafa3102f5c9a1b8315e6d7a1e43e4bc020bc1162327470a8760405161202f91815260200190565b60405180910390a350505050505050565b6001600160a01b0380831660009081526008602090815260408083209385168352929052205460ff166120c9576001600160a01b0380831660008181526008602090815260408083209486168352938152838220805460ff1916600190811790915560098252938220805494850181558252902090910180546001600160a01b03191690911790555b5050565b6000806120dc86868686612903565b50915091508082111560405180604001604052806002815260200161313360f01b8152509061211e5760405162461bcd60e51b815260040161035091906159cc565b50505050505050565b600c5460405163303e07b560e11b81526001600160a01b038085166004830152839285926000929091169063607c0f6a90602401602060405180830381600087803b15801561217557600080fd5b505af1158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad919061589b565b90506000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156121ec57600080fd5b505af1158015612200573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612224919061589b565b6001600160a01b038781166000908152600360205260408120600101549293509116905060006122896040518060400160405280601781526020017f6265666f72652072656d61696e696e67546f4d61746368000000000000000000815250876137fb565b6122b96040518060400160405280600e81526020016d1899599bdc99481858d8dbdd5b9d60921b815250836137b6565b604080518082018252600b81526a1899599bdc99481d185a5b60aa1b6020808301919091526001600160a01b03808c16600090815260039092529290206002015461230492166137b6565b60008611801561231c57506001600160a01b03821615155b801561232d575060015461ffff1681105b15612676578061233c81615c33565b915050612376604051806040016040528060158152602001741899599bdc99481a5d195c985d1a5bdb90dbdd5b9d605a1b815250826137fb565b61239f604051806040016040528060078152602001661858d8dbdd5b9d60ca1b815250836137b6565b6123d6604051806040016040528060158152602001740d8dedee040e4cadac2d2dcd2dccea8de9ac2e8c6d605b1b815250876137fb565b6001600160a01b03808916600090815260066020908152604080832093861683529290529081206001015461240b9085612f60565b90506000612419828961473b565b9050612465604051806060016040528060318152602001615ce7603191396001600160a01b03808d166000908152600660209081526040808320938a16835292905220600101546137fb565b612499604051806040016040528060128152602001716f6e506f6f6c496e556e6465726c79696e6760701b815250836137fb565b6124c2604051806040016040528060078152602001660e8de9ac2e8c6d60cb1b815250826137fb565b6124cd818787614751565b15612568576124dc81866126db565b6001600160a01b03808c16600090815260066020908152604080832093891683529290529081206001018054909190612516908490615bcd565b90915550612526905081876126db565b6001600160a01b03808c1660009081526006602090815260408083209389168352929052908120805490919061255d908490615a86565b909155506125949050565b6001600160a01b03808b1660009081526006602090815260408083209388168352929052908120600101555b61259e8189615bcd565b97506125d26040518060400160405280601081526020016f0e4cadac2d2dcd2dccea8de9ac2e8c6d60831b815250896137fb565b6125dc8a85613d99565b896001600160a01b0316846001600160a01b0316600080516020615d188339815191526000848560008c8c604051612619969594939291906159a4565b60405180910390a36001600160a01b038a811660009081526003602052604090206001015416935061266f6040518060400160405280600c81526020016b1b995e1d081858d8dbdd5b9d60a21b815250856137b6565b5050612304565b6126a86040518060400160405280601081526020016f0e4cadac2d2dcd2dccea8de9ac2e8c6d60831b815250876137fb565b60006126b48789615bcd565b90506126c089826140a1565b156126cf576126cf898261478d565b50505050505092915050565b6000670de0b6b3a7640000826126f18583615bae565b61270390670de0b6b3a7640000615bae565b61270d9190615a9e565b6127179190615a9e565b90505b92915050565b6001600160a01b03808316600081815260076020908152604080832094861683529381528382206001810154905493835260059091529281206127639085614841565b6001600160a01b0386166000908152600460205260408120919250906127899086614841565b90506000821580159061279c5750848314155b905080156127c8576001600160a01b03871660009081526005602052604090206127c69087614860565b505b6000851180156127dd575080806127dd575082155b1561280e576001546001600160a01b038816600090815260056020526040902061280e918890889061ffff16614a4d565b6000821580159061281f5750848314155b9050801561284b576001600160a01b03881660009081526004602052604090206128499088614860565b505b60008511801561286057508080612860575082155b15612891576001546001600160a01b0389166000908152600460205260409020612891918990889061ffff16614a4d565b5050505050505050565b6040516001600160a01b0383166024820152604481018290526128fe90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614b38565b505050565b600080600061296060405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b600b54604080516307dc0d1d60e41b815290516000926001600160a01b031691637dc0d1d091600480830192602092919082900301818787803b1580156129a657600080fd5b505af11580156129ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129de9190615688565b905060005b6001600160a01b038a16600090815260096020526040902054811015612f29576001600160a01b038a166000908152600960205260409020805482908110612a2d57612a2d615c64565b6000918252602090912001546001600160a01b0390811660c08501819052600c546040516386779faf60e01b81526004810192909252909116906386779faf90602401602060405180830381600087803b158015612a8a57600080fd5b505af1158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac2919061589b565b60e0840181905260c08401516001600160a01b039081166000908152600760209081526040808320938f1683529290522054612afd91612f60565b612bd58460c001516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612b3f57600080fd5b505af1158015612b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b77919061589b565b600760008760c001516001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002060010154612f6090919063ffffffff16565b612bdf9190615a86565b608084015260e083015160c08401516001600160a01b039081166000908152600660209081526040808320938f1683529290522054612c1d91612f60565b612cf58460c001516001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c5f57600080fd5b505af1158015612c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c97919061589b565b600660008760c001516001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002060010154612f6090919063ffffffff16565b612cff9190615a86565b60a084015260c083015160405163fc57d4df60e01b81526001600160a01b0391821660048201529083169063fc57d4df9060240160206040518083038186803b158015612d4b57600080fd5b505afa158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d83919061589b565b6101008401819052604080518082019091526002815261062760f31b602082015290612dc25760405162461bcd60e51b815260040161035091906159cc565b508260c001516001600160a01b0316896001600160a01b03161415612e0d578683608001818151612df39190615a86565b905250610100830151612e07908990612f60565b60408401525b61010083015160a0840151612e2191612f60565b60a08401526101008301516080840151612e3a91612f60565b83518490612e49908390615a86565b90525060a0830151606084018051612e62908390615a86565b905250600b5460c0840151604051638e8f294b60e01b81526001600160a01b0391821660048201526000929190911690638e8f294b90602401606060405180830381600087803b158015612eb557600080fd5b505af1158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed919061583b565b5060a0860151909250612f01915082612f60565b84602001818151612f129190615a86565b905250819050612f2181615c33565b9150506129e3565b50816040015182606001818151612f409190615bcd565b905250508051602082015160609092015190999198509650945050505050565b6000670de0b6b3a764000061270d8385615bae565b600c54604051637c01394b60e11b81526001600160a01b0380871660048301528692169063f802729690602401602060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff49190615820565b604051806040016040528060018152602001600d60fa1b8152509061302c5760405162461bcd60e51b815260040161035091906159cc565b506040805180820190915260018152603760f81b6020820152846130635760405162461bcd60e51b815260040161035091906159cc565b5061307183868660006120cd565b846001600160a01b0316836001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb866040516130b691815260200190565b60405180910390a360008590506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156130fe57600080fd5b505afa158015613112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131369190615688565b90506000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561317557600080fd5b505af1158015613189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ad919061589b565b6001600160a01b03808a166000908152600660209081526040808320938b1683529290522060010154909150879015613424576001600160a01b03808a166000908152600660209081526040808320938b168352929052908120600101546132159084612f60565b90508089116132d0576132288a8a6140a1565b156132c75761323789846126db565b6001600160a01b03808c166000908152600660209081526040808320938d1683529290529081206001018054909190613271908490615bcd565b9091555061328190508a8a61478d565b896001600160a01b0316886001600160a01b0316600080516020615d188339815191526000808d6000808a6040516132be969594939291906159a4565b60405180910390a35b60009150613418565b6001600160a01b038a811660009081526006602090815260408083208c851684529091529081902060010154905163db006a7560e01b81529187169163db006a75916133229160040190815260200190565b602060405180830381600087803b15801561333c57600080fd5b505af1158015613350573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613374919061589b565b604080518082019091526002815261189b60f11b602082015290156133ac5760405162461bcd60e51b815260040161035091906159cc565b506001600160a01b03808b166000818152600660209081526040808320948d168084529490915280822060010182905551919291600080516020615d18833981519152916134039181908790829081908c906159a4565b60405180910390a3613415818a615bcd565b91505b6134228a89613d99565b505b801561379757600c5460405163303e07b560e11b81526001600160a01b038b81166004830152600092169063607c0f6a90602401602060405180830381600087803b15801561347257600080fd5b505af1158015613486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134aa919061589b565b6040516370a0823160e01b815230600482015290915060009061352f9085906001600160a01b038916906370a0823190602401602060405180830381600087803b1580156134f757600080fd5b505af115801561350b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd5919061589b565b905080831161369e576135686040518060400160405280600e81526020016d5f63546f6b656e4164647265737360901b8152508c6137b6565b61359d6040518060400160405280601381526020017272656d61696e696e67546f576974686472617760681b815250846137fb565b6135bf604051806060016040528060218152602001615ca660219139826137fb565b6135c983836126db565b6001600160a01b03808d166000908152600660209081526040808320938e1683529290529081208054909190613600908490615bcd565b9091555061361090508b8a613d99565b61361a8b84612127565b604080518082019091526002815261313160f01b602082015290156136525760405162461bcd60e51b815260040161035091906159cc565b508a6001600160a01b0316896001600160a01b0316600080516020615d18833981519152600080600088886000604051613691969594939291906159a4565b60405180910390a3613794565b6136a883836126db565b6001600160a01b03808d166000908152600660209081526040808320938e16835292905290812080549091906136df908490615bcd565b909155506136ef90508b8a613d99565b60006136fb8c83612127565b90508b6001600160a01b03168a6001600160a01b0316600080516020615d1883398151915260008060008989600060405161373b969594939291906159a4565b60405180910390a361374d8185615bcd565b93506137598c85614c0a565b604080518082019091526002815261189960f11b602082015290156137915760405162461bcd60e51b815260040161035091906159cc565b50505b50505b6137ab6001600160a01b038416878a61289b565b505050505050505050565b6120c982826040516024016137cc9291906159df565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614ffc565b6120c98282604051602401613811929190615a2d565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614ffc565b6040516001600160a01b03808516602483015283166044820152606481018290526138789085906323b872dd60e01b906084016128c7565b50505050565b6138c18160405160240161389291906159cc565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614ffc565b50565b6000808390506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561390557600080fd5b505afa158015613919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393d9190615688565b600c5460405163303e07b560e11b81526001600160a01b0388811660048301528796509293506000929091169063607c0f6a90602401602060405180830381600087803b15801561398d57600080fd5b505af11580156139a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c5919061589b565b90506000836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613a0457600080fd5b505af1158015613a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3c919061589b565b6001600160a01b038881166000908152600560205260408120600101549293509116905b600087118015613a7857506001600160a01b03821615155b8015613a89575060015461ffff1681105b15613c365780613a9881615c33565b6001600160a01b03808c1660009081526007602090815260408083209388168352929052908120600101549193509150613ad29085612f60565b90506000613ae0828a61473b565b9050613aed818688614751565b15613b8857613afc81866126db565b6001600160a01b03808d16600090815260076020908152604080832093891683529290529081206001018054909190613b36908490615bcd565b90915550613b46905081876126db565b6001600160a01b03808d16600090815260076020908152604080832093891683529290529081208054909190613b7d908490615a86565b90915550613bb49050565b6001600160a01b03808c1660009081526007602090815260408083209388168352929052908120600101555b613bbe818a615bcd565b9850613bca8b85612720565b8a6001600160a01b0316846001600160a01b0316600080516020615cc78339815191526000848560008c8c604051613c07969594939291906159a4565b60405180910390a36001600160a01b038b81166000908152600560205260409020600101541693505050613a60565b6000613cc3613c45898b615bcd565b6040516305eff7ef60e21b81523060048201526001600160a01b038a16906317bfdfbc90602401602060405180830381600087803b158015613c8657600080fd5b505af1158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe919061589b565b61473b565b9050613cd96001600160a01b0387168b83614316565b60405163073a938160e11b8152600481018290526001600160a01b03881690630e75270290602401602060405180830381600087803b158015613d1b57600080fd5b505af1158015613d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d53919061589b565b604080518082019091526002815261313760f01b60208201529015613d8b5760405162461bcd60e51b815260040161035091906159cc565b505050505050505092915050565b613dc96040518060400160405280600e81526020016d1d5c19185d19481858d8dbdd5b9d60921b815250826137b6565b613dfb6040518060400160405280601081526020016f3ab83230ba329037b71031aa37b5b2b760811b815250836137b6565b6001600160a01b038281166000908152600660208181526040808420948616845293815291839020600181015490548451808601909552918452651bdb941bdbdb60d21b928401929092529091613e5290836137fb565b6001600160a01b0384166000908152600360205260408120613e749085614841565b6001600160a01b038616600090815260026020526040812091925090613e9a9086614841565b9050613ecf60405180604001604052806011815260200170199bdc9b595c95985b1d5953db941bdbdb607a1b815250836137fb565b60008215801590613ee05750848314155b9050613f216040518060400160405280601881526020017f7761734f6e506f6f6c416e6456616c75654368616e67656400000000000000008152508261501d565b8015613f4b576001600160a01b0387166000908152600360205260409020613f499087614860565b505b600085118015613f6057508080613f60575082155b1561401e57613f8f604051806040016040528060088152602001671a5b9cd95c9d195960c21b815250866137fb565b6001546001600160a01b0388166000908152600360205260409020613fbb918890889061ffff16614a4d565b61401e6040518060400160405280600b81526020016a3b30b63ab29030b33a32b960a91b81525061401988600360008c6001600160a01b03166001600160a01b0316815260200190815260200160002061484190919063ffffffff16565b6137fb565b6000821580159061402f5750848314155b9050801561405b576001600160a01b03881660009081526002602052604090206140599088614860565b505b60008511801561407057508080614070575082155b15612891576001546001600160a01b0389166000908152600260205260409020612891918990889061ffff16614a4d565b600080836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156140dd57600080fd5b505afa1580156140f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141159190615688565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561415257600080fd5b505afa158015614166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061418a91906158b4565b9050600860ff821611156141c4576141a3600882615be4565b6141ae90600a615b03565b6141b9906002615bae565b84119250505061271a565b60019250505061271a565b60008290506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561420f57600080fd5b505afa158015614223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142479190615688565b905061425d6001600160a01b0382168585614316565b60405163140e25ad60e31b8152600481018490526001600160a01b0383169063a0712d6890602401602060405180830381600087803b15801561429f57600080fd5b505af11580156142b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142d7919061589b565b604080518082019091526002815261313560f01b6020820152901561430f5760405162461bcd60e51b815260040161035091906159cc565b5050505050565b80158061439f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561436557600080fd5b505afa158015614379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061439d919061589b565b155b61440a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610350565b6040516001600160a01b0383166024820152604481018290526128fe90849063095ea7b360e01b906064016128c7565b6000808390508291506000816001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561448057600080fd5b505af1158015614494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144b8919061589b565b600c5460405163303e07b560e11b81526001600160a01b0388811660048301529293506000929091169063607c0f6a90602401602060405180830381600087803b15801561450557600080fd5b505af1158015614519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061453d919061589b565b6001600160a01b03878116600090815260026020526040902060010154919250165b60008511801561457757506001600160a01b03811615155b15614709576001600160a01b038088166000908152600660209081526040808320938516835292905290812054906145b86145b28386612f60565b8861473b565b90506145c5818587614751565b15614660576145d481856126db565b6001600160a01b03808b1660009081526006602090815260408083209388168352929052908120805490919061460b908490615bcd565b9091555061461b905081866126db565b6001600160a01b03808b16600090815260066020908152604080832093881683529290529081206001018054909190614655908490615a86565b909155506146899050565b6001600160a01b03808a1660009081526006602090815260408083209387168352929052908120555b6146938188615bcd565b965061469f8984613d99565b886001600160a01b0316836001600160a01b0316600080516020615d1883398151915283600080868a8c6040516146db969594939291906159a4565b60405180910390a35050506001600160a01b038681166000908152600260205260409020600101541661455f565b60006147158688615bcd565b905061472188826140a1565b156147305761473088826141cf565b505050505092915050565b600081831061474a5781612717565b5090919050565b6000614765670de0b6b3a764000084615a9e565b841180156147835750614780670de0b6b3a764000083615a9e565b84115b90505b9392505050565b60405163852a12e360e01b81526004810182905282906001600160a01b0382169063852a12e390602401602060405180830381600087803b1580156147d157600080fd5b505af11580156147e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614809919061589b565b604080518082019091526002815261189b60f11b602082015290156138785760405162461bcd60e51b815260040161035091906159cc565b6001600160a01b03166000908152602091909152604090206003015490565b600061486c8383615062565b15614a45576001600160a01b0380831660008181526020868152604091829020825160a0810184528154861681526001808301548716938201939093526002820154861693810193909352600381015460608401526004015460ff16151560808301528601549092161480156148f1575060028401546001600160a01b038481169116145b1561491157614901846000615084565b61490c8460006150a9565b6149d2565b60018401546001600160a01b038481169116141561496957614937848260200151615084565b6020808201516001600160a01b03166000908152908590526040902060020180546001600160a01b03191690556149d2565b60028401546001600160a01b03848116911614156149bf5761498f8482604001516150a9565b6040808201516001600160a01b0316600090815260208690522060010180546001600160a01b03191690556149d2565b6149d284826040015183602001516150ce565b60018460030160008282546149e79190615bcd565b9091555050516001600160a01b0316600090815260208490526040812080546001600160a01b0319908116825560018083018054831690556002830180549092169091556003820192909255600401805460ff19169055905061271a565b50600061271a565b614a578484615062565b15614a6157600080fd5b60018401546001600160a01b031660005b828111158015614a92575060028601546001600160a01b03838116911614155b8015614ab857506001600160a01b03821660009081526020879052604090206003015484105b15614af0576001600160a01b039182166000908152602087905260409020600101549091169080614ae881615c33565b915050614a72565b614afb836001615a86565b811415614b1b57614b0d868686615117565b614b1657600080fd5b614b30565b614b2786838787615189565b614b3057600080fd5b505050505050565b6000614b8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166153d59092919063ffffffff16565b8051909150156128fe5780806020019051810190614bab9190615820565b6128fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610350565b600c5460405163303e07b560e11b81526001600160a01b038085166004830152839285926000929091169063607c0f6a90602401602060405180830381600087803b158015614c5857600080fd5b505af1158015614c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c90919061589b565b90506000826001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015614ccf57600080fd5b505af1158015614ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d07919061589b565b6001600160a01b0387811660009081526004602052604081206001015492935091169050614d5e604051806040016040528060118152602001705f756e6d61746368426f72726f7765727360781b815250876137fb565b614d87604051806040016040528060078152602001661858d8dbdd5b9d60ca1b815250826137b6565b600085118015614d9f57506001600160a01b03811615155b15614f2b576001600160a01b03808816600090815260076020908152604080832093851683529290529081205490614dda6145b28387612f60565b9050614de7818587614751565b15614e8257614df681856126db565b6001600160a01b03808b16600090815260076020908152604080832093881683529290529081206001018054909190614e30908490615a86565b90915550614e40905081866126db565b6001600160a01b03808b16600090815260076020908152604080832093881683529290529081208054909190614e77908490615bcd565b90915550614eab9050565b6001600160a01b03808a1660009081526007602090815260408083209387168352929052908120555b614eb58188615bcd565b9650614ec18984612720565b886001600160a01b0316836001600160a01b0316600080516020615cc783398151915283600080868b8b604051614efd969594939291906159a4565b60405180910390a35050506001600160a01b0386811660009081526004602052604090206001015416614d87565b614f5f604051806040016040528060128152602001710e4cadac2d2dcd2dccea8deaadcdac2e8c6d60731b815250866137fb565b6001600160a01b03841663c5ebeaec614f788789615bcd565b6040518263ffffffff1660e01b8152600401614f9691815260200190565b602060405180830381600087803b158015614fb057600080fd5b505af1158015614fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fe8919061589b565b15614ff257600080fd5b5050505092915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6120c98282604051602401615033929190615a09565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052614ffc565b6001600160a01b03166000908152602091909152604090206004015460ff1690565b60019190910180546001600160a01b0319166001600160a01b03909216919091179055565b60029190910180546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b03918216600081815260209490945260408085206001018054949093166001600160a01b03199485168117909355918452922060020180549091169091179055565b60006151238484615062565b6151815760018401546001600160a01b031661514a576151448484846153e4565b50615179565b615155848484615440565b600284015461516f9085906001600160a01b0316856150ce565b61517984846150a9565b506001614786565b506000614786565b60006151958584615062565b1561519f57600080fd5b60028501546001600160a01b03858116911614156151c9576151c2858484615117565b90506153cd565b6000856000016000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600086600001600083604001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506153a8878686615440565b6153b7878684600001516150ce565b6153c6878260000151876150ce565b6001925050505b949350505050565b606061478384846000856154fa565b60006153f08484615062565b615181576153ff848484615440565b600184015461541a90859085906001600160a01b03166150ce565b6154248484615084565b60028401546001600160a01b03166151795761517984846150a9565b60018360030160008282546154559190615a86565b90915550506040805160a0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526001608087018181529585529990925294909120925183546001600160a01b0319908116918816919091178455935196830180548516978716979097179096559451600282018054909316941693909317905551600382015590516004909101805460ff1916911515919091179055565b60608247101561555b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610350565b843b6155a95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610350565b600080866001600160a01b031685876040516155c59190615903565b60006040518083038185875af1925050503d8060008114615602576040519150601f19603f3d011682016040523d82523d6000602084013e615607565b606091505b5091509150615617828286615622565b979650505050505050565b60608315615631575081614786565b8251156156415782518084602001fd5b8160405162461bcd60e51b815260040161035091906159cc565b805180151581146109e957600080fd5b60006020828403121561567d57600080fd5b813561478681615c90565b60006020828403121561569a57600080fd5b815161478681615c90565b600080604083850312156156b857600080fd5b82356156c381615c90565b915060208301356156d381615c90565b809150509250929050565b600080600080608085870312156156f457600080fd5b84356156ff81615c90565b9350602085013561570f81615c90565b9250604085013561571f81615c90565b9396929550929360600135925050565b6000806040838503121561574257600080fd5b823561574d81615c90565b946020939093013593505050565b6000602080838503121561576e57600080fd5b825167ffffffffffffffff8082111561578657600080fd5b818501915085601f83011261579a57600080fd5b8151818111156157ac576157ac615c7a565b8060051b604051601f19603f830116810181811085821117156157d1576157d1615c7a565b604052828152858101935084860182860187018a10156157f057600080fd5b600095505b838610156158135780518552600195909501949386019386016157f5565b5098975050505050505050565b60006020828403121561583257600080fd5b6127178261565b565b60008060006060848603121561585057600080fd5b6158598461565b565b92506020840151915061586e6040850161565b565b90509250925092565b60006020828403121561588957600080fd5b813561ffff8116811461478657600080fd5b6000602082840312156158ad57600080fd5b5051919050565b6000602082840312156158c657600080fd5b815160ff8116811461478657600080fd5b600081518084526158ef816020860160208601615c07565b601f01601f19169290920160200192915050565b60008251615915818460208701615c07565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156159605783516001600160a01b03168352928401929184019160010161593b565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561596057835183529284019291840191600101615988565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60208152600061271760208301846158d7565b6040815260006159f260408301856158d7565b905060018060a01b03831660208301529392505050565b604081526000615a1c60408301856158d7565b905082151560208301529392505050565b604081526000615a4060408301856158d7565b90508260208301529392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115615a9957615a99615c4e565b500190565b600082615abb57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115615afb578160001904821115615ae157615ae1615c4e565b80851615615aee57918102915b93841c9390800290615ac5565b509250929050565b600061271760ff841683600082615b1c5750600161271a565b81615b295750600061271a565b8160018114615b3f5760028114615b4957615b65565b600191505061271a565b60ff841115615b5a57615b5a615c4e565b50506001821b61271a565b5060208310610133831016604e8410600b8410161715615b88575081810a61271a565b615b928383615ac0565b8060001904821115615ba657615ba6615c4e565b029392505050565b6000816000190483118215151615615bc857615bc8615c4e565b500290565b600082821015615bdf57615bdf615c4e565b500390565b600060ff821660ff841680821015615bfe57615bfe615c4e565b90039392505050565b60005b83811015615c22578181015183820152602001615c0a565b838111156138785750506000910152565b6000600019821415615c4757615c47615c4e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146138c157600080fdfe63546f6b656e436f6e747261637442616c616e6365496e556e6465726c79696e674f9349fd7715972a7cc95dd9408cad0be8ebe2c06da64217cbde369f80e49eb2737570706c7942616c616e6365496e4f665b5f63546f6b656e416464726573735d5b6163636f756e745d2e6f6e506f6f6c0cc380ae343b0c73a0d1a9c6bf7f938bc21f73a6e7f587e8b0e4f93c7bfe9105a26469706673582212204ce3a8e50ff83de5c0cad11a2f39fc8427720d5e5f873d1c7ca549faffa261eb64736f6c63430008070033","deployedBytecode":"","abi":[{"inputs":[{"internalType":"address","name":"_compoundMarketsManager","type":"address"},{"internalType":"address","name":"_proxyComptrollerAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_account","type":"address"},{"indexed":true,"internalType":"address","name":"_cTokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"Borrowed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_account","type":"address"},{"indexed":true,"internalType":"address","name":"_cTokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amountAddedOnPool","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amountAddedInP2P","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amountRemovedFromPool","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amountRemovedFromP2P","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_p2pExchangeRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_borrowIndex","type":"uint256"}],"name":"BorrowerPositionUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_liquidator","type":"address"},{"indexed":true,"internalType":"address","name":"_liquidatee","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amountRepaid","type":"uint256"},{"indexed":false,"internalType":"address","name":"_cTokenBorrowedAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amountSeized","type":"uint256"},{"indexed":false,"internalType":"address","name":"_cTokenCollateralAddress","type":"address"}],"name":"Liquidated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_account","type":"address"},{"indexed":true,"internalType":"address","name":"_cTokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"Repaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_account","type":"address"},{"indexed":true,"internalType":"address","name":"_cTokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"Supplied","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_account","type":"address"},{"indexed":true,"internalType":"address","name":"_cTokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amountAddedOnPool","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amountAddedInP2P","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amountRemovedFromPool","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amountRemovedFromP2P","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_p2pExchangeRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_cTokenExchangeRate","type":"uint256"}],"name":"SupplierPositionUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_account","type":"address"},{"indexed":true,"internalType":"address","name":"_cTokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"CTOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NMAX","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"accountMembership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenAddress","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"borrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"borrowBalanceInOf","outputs":[{"internalType":"uint256","name":"inP2P","type":"uint256"},{"internalType":"uint256","name":"onPool","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"comptroller","outputs":[{"internalType":"contract IComptroller","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenAddress","type":"address"}],"name":"createMarket","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"enteredMarkets","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenBorrowedAddress","type":"address"},{"internalType":"address","name":"_cTokenCollateralAddress","type":"address"},{"internalType":"address","name":"_borrower","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"liquidate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"marketsManagerForCompound","outputs":[{"internalType":"contract IMarketsManagerForCompound","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenAddress","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"_newMaxNumber","type":"uint16"}],"name":"setMaxNumberOfUsersInTree","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenAddress","type":"address"},{"internalType":"uint256","name":"_newThreshold","type":"uint256"}],"name":"setThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenAddress","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"supply","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"supplyBalanceInOf","outputs":[{"internalType":"uint256","name":"inP2P","type":"uint256"},{"internalType":"uint256","name":"onPool","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"threshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cTokenAddress","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}